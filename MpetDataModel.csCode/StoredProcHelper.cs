//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using DevExpress.Xpo;
using DevExpress.Data.Filtering;
using System.Collections.Generic;
using System.ComponentModel;
namespace MpetDataModel.cs
{
    public static class SprocHelper
    {
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredAreaList(Session session, string AreaID, string Description, string CostCode, int PMSpanMatchStart, int PMSpanMatchEnd, string Active)
        {
            return session.ExecuteSproc("filter_GetFilteredAreaList", new OperandValue(AreaID), new OperandValue(Description), new OperandValue(CostCode), new OperandValue(PMSpanMatchStart), new OperandValue(PMSpanMatchEnd), new OperandValue(Active));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredAreaListResult> Execfilter_GetFilteredAreaListIntoObjects(Session session, string AreaID, string Description, string CostCode, int PMSpanMatchStart, int PMSpanMatchEnd, string Active)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredAreaListResult>("filter_GetFilteredAreaList", new OperandValue(AreaID), new OperandValue(Description), new OperandValue(CostCode), new OperandValue(PMSpanMatchStart), new OperandValue(PMSpanMatchEnd), new OperandValue(Active));
        }
        public static XPDataView Execfilter_GetFilteredAreaListIntoDataView(Session session, string AreaID, string Description, string CostCode, int PMSpanMatchStart, int PMSpanMatchEnd, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredAreaList", new OperandValue(AreaID), new OperandValue(Description), new OperandValue(CostCode), new OperandValue(PMSpanMatchStart), new OperandValue(PMSpanMatchEnd), new OperandValue(Active));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredAreaListResult)), sprocData);
        }
        public static void Execfilter_GetFilteredAreaListIntoDataView(XPDataView dataView, Session session, string AreaID, string Description, string CostCode, int PMSpanMatchStart, int PMSpanMatchEnd, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredAreaList", new OperandValue(AreaID), new OperandValue(Description), new OperandValue(CostCode), new OperandValue(PMSpanMatchStart), new OperandValue(PMSpanMatchEnd), new OperandValue(Active));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredAreaListResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredCarrierList(Session session, string Carrier, string Descr, string Address1, string Address2, string City, string State, string Zip, string Contact, string Phone, string Fax, string Notes, string Active)
        {
            return session.ExecuteSproc("filter_GetFilteredCarrierList", new OperandValue(Carrier), new OperandValue(Descr), new OperandValue(Address1), new OperandValue(Address2), new OperandValue(City), new OperandValue(State), new OperandValue(Zip), new OperandValue(Contact), new OperandValue(Phone), new OperandValue(Fax), new OperandValue(Notes), new OperandValue(Active));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredCarrierListResult> Execfilter_GetFilteredCarrierListIntoObjects(Session session, string Carrier, string Descr, string Address1, string Address2, string City, string State, string Zip, string Contact, string Phone, string Fax, string Notes, string Active)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredCarrierListResult>("filter_GetFilteredCarrierList", new OperandValue(Carrier), new OperandValue(Descr), new OperandValue(Address1), new OperandValue(Address2), new OperandValue(City), new OperandValue(State), new OperandValue(Zip), new OperandValue(Contact), new OperandValue(Phone), new OperandValue(Fax), new OperandValue(Notes), new OperandValue(Active));
        }
        public static XPDataView Execfilter_GetFilteredCarrierListIntoDataView(Session session, string Carrier, string Descr, string Address1, string Address2, string City, string State, string Zip, string Contact, string Phone, string Fax, string Notes, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredCarrierList", new OperandValue(Carrier), new OperandValue(Descr), new OperandValue(Address1), new OperandValue(Address2), new OperandValue(City), new OperandValue(State), new OperandValue(Zip), new OperandValue(Contact), new OperandValue(Phone), new OperandValue(Fax), new OperandValue(Notes), new OperandValue(Active));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredCarrierListResult)), sprocData);
        }
        public static void Execfilter_GetFilteredCarrierListIntoDataView(XPDataView dataView, Session session, string Carrier, string Descr, string Address1, string Address2, string City, string State, string Zip, string Contact, string Phone, string Fax, string Notes, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredCarrierList", new OperandValue(Carrier), new OperandValue(Descr), new OperandValue(Address1), new OperandValue(Address2), new OperandValue(City), new OperandValue(State), new OperandValue(Zip), new OperandValue(Contact), new OperandValue(Phone), new OperandValue(Fax), new OperandValue(Notes), new OperandValue(Active));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredCarrierListResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredCheckInReasons(Session session, string IDContains, string DescrContains, string Active)
        {
            return session.ExecuteSproc("filter_GetFilteredCheckInReasons", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredCheckInReasonsResult> Execfilter_GetFilteredCheckInReasonsIntoObjects(Session session, string IDContains, string DescrContains, string Active)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredCheckInReasonsResult>("filter_GetFilteredCheckInReasons", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
        }
        public static XPDataView Execfilter_GetFilteredCheckInReasonsIntoDataView(Session session, string IDContains, string DescrContains, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredCheckInReasons", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredCheckInReasonsResult)), sprocData);
        }
        public static void Execfilter_GetFilteredCheckInReasonsIntoDataView(XPDataView dataView, Session session, string IDContains, string DescrContains, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredCheckInReasons", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredCheckInReasonsResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredCheckOutReasons(Session session, string IDContains, string DescrContains, string Active)
        {
            return session.ExecuteSproc("filter_GetFilteredCheckOutReasons", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredCheckOutReasonsResult> Execfilter_GetFilteredCheckOutReasonsIntoObjects(Session session, string IDContains, string DescrContains, string Active)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredCheckOutReasonsResult>("filter_GetFilteredCheckOutReasons", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
        }
        public static XPDataView Execfilter_GetFilteredCheckOutReasonsIntoDataView(Session session, string IDContains, string DescrContains, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredCheckOutReasons", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredCheckOutReasonsResult)), sprocData);
        }
        public static void Execfilter_GetFilteredCheckOutReasonsIntoDataView(XPDataView dataView, Session session, string IDContains, string DescrContains, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredCheckOutReasons", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredCheckOutReasonsResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredConditionCodeList(Session session, string ID, string Descr, string Active)
        {
            return session.ExecuteSproc("filter_GetFilteredConditionCodeList", new OperandValue(ID), new OperandValue(Descr), new OperandValue(Active));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredConditionCodeListResult> Execfilter_GetFilteredConditionCodeListIntoObjects(Session session, string ID, string Descr, string Active)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredConditionCodeListResult>("filter_GetFilteredConditionCodeList", new OperandValue(ID), new OperandValue(Descr), new OperandValue(Active));
        }
        public static XPDataView Execfilter_GetFilteredConditionCodeListIntoDataView(Session session, string ID, string Descr, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredConditionCodeList", new OperandValue(ID), new OperandValue(Descr), new OperandValue(Active));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredConditionCodeListResult)), sprocData);
        }
        public static void Execfilter_GetFilteredConditionCodeListIntoDataView(XPDataView dataView, Session session, string ID, string Descr, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredConditionCodeList", new OperandValue(ID), new OperandValue(Descr), new OperandValue(Active));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredConditionCodeListResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredControlSections(Session session, string IDContains, string DescrContains, string Active)
        {
            return session.ExecuteSproc("filter_GetFilteredControlSections", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredControlSectionsResult> Execfilter_GetFilteredControlSectionsIntoObjects(Session session, string IDContains, string DescrContains, string Active)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredControlSectionsResult>("filter_GetFilteredControlSections", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
        }
        public static XPDataView Execfilter_GetFilteredControlSectionsIntoDataView(Session session, string IDContains, string DescrContains, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredControlSections", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredControlSectionsResult)), sprocData);
        }
        public static void Execfilter_GetFilteredControlSectionsIntoDataView(XPDataView dataView, Session session, string IDContains, string DescrContains, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredControlSections", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredControlSectionsResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredCostCodeLinkList(Session session, int CostCodeID)
        {
            return session.ExecuteSproc("filter_GetFilteredCostCodeLinkList", new OperandValue(CostCodeID));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredCostCodeLinkListResult> Execfilter_GetFilteredCostCodeLinkListIntoObjects(Session session, int CostCodeID)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredCostCodeLinkListResult>("filter_GetFilteredCostCodeLinkList", new OperandValue(CostCodeID));
        }
        public static XPDataView Execfilter_GetFilteredCostCodeLinkListIntoDataView(Session session, int CostCodeID)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredCostCodeLinkList", new OperandValue(CostCodeID));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredCostCodeLinkListResult)), sprocData);
        }
        public static void Execfilter_GetFilteredCostCodeLinkListIntoDataView(XPDataView dataView, Session session, int CostCodeID)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredCostCodeLinkList", new OperandValue(CostCodeID));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredCostCodeLinkListResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredCostCodesList(Session session, string CostcodeID, string CostCodeDesc, string SupplementalID, string ActiveYNB, string FundSourceID, string FundSourceDesc)
        {
            return session.ExecuteSproc("filter_GetFilteredCostCodesList", new OperandValue(CostcodeID), new OperandValue(CostCodeDesc), new OperandValue(SupplementalID), new OperandValue(ActiveYNB), new OperandValue(FundSourceID), new OperandValue(FundSourceDesc));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredCostCodesListResult> Execfilter_GetFilteredCostCodesListIntoObjects(Session session, string CostcodeID, string CostCodeDesc, string SupplementalID, string ActiveYNB, string FundSourceID, string FundSourceDesc)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredCostCodesListResult>("filter_GetFilteredCostCodesList", new OperandValue(CostcodeID), new OperandValue(CostCodeDesc), new OperandValue(SupplementalID), new OperandValue(ActiveYNB), new OperandValue(FundSourceID), new OperandValue(FundSourceDesc));
        }
        public static XPDataView Execfilter_GetFilteredCostCodesListIntoDataView(Session session, string CostcodeID, string CostCodeDesc, string SupplementalID, string ActiveYNB, string FundSourceID, string FundSourceDesc)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredCostCodesList", new OperandValue(CostcodeID), new OperandValue(CostCodeDesc), new OperandValue(SupplementalID), new OperandValue(ActiveYNB), new OperandValue(FundSourceID), new OperandValue(FundSourceDesc));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredCostCodesListResult)), sprocData);
        }
        public static void Execfilter_GetFilteredCostCodesListIntoDataView(XPDataView dataView, Session session, string CostcodeID, string CostCodeDesc, string SupplementalID, string ActiveYNB, string FundSourceID, string FundSourceDesc)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredCostCodesList", new OperandValue(CostcodeID), new OperandValue(CostCodeDesc), new OperandValue(SupplementalID), new OperandValue(ActiveYNB), new OperandValue(FundSourceID), new OperandValue(FundSourceDesc));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredCostCodesListResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredCycleCountStages(Session session, string ActiveYNB, string StageID, string StageDesc)
        {
            return session.ExecuteSproc("filter_GetFilteredCycleCountStages", new OperandValue(ActiveYNB), new OperandValue(StageID), new OperandValue(StageDesc));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredCycleCountStagesResult> Execfilter_GetFilteredCycleCountStagesIntoObjects(Session session, string ActiveYNB, string StageID, string StageDesc)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredCycleCountStagesResult>("filter_GetFilteredCycleCountStages", new OperandValue(ActiveYNB), new OperandValue(StageID), new OperandValue(StageDesc));
        }
        public static XPDataView Execfilter_GetFilteredCycleCountStagesIntoDataView(Session session, string ActiveYNB, string StageID, string StageDesc)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredCycleCountStages", new OperandValue(ActiveYNB), new OperandValue(StageID), new OperandValue(StageDesc));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredCycleCountStagesResult)), sprocData);
        }
        public static void Execfilter_GetFilteredCycleCountStagesIntoDataView(XPDataView dataView, Session session, string ActiveYNB, string StageID, string StageDesc)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredCycleCountStages", new OperandValue(ActiveYNB), new OperandValue(StageID), new OperandValue(StageDesc));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredCycleCountStagesResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredDailyTimesList(Session session, string BatchSentYNB, string BatchNumLike, DateTime StartDate, DateTime EndDate, string WeatherID, string CrewGroupID, string ChargeCode, string JobID, string FunctionCode, string Notes, string PersonnelID, string PayReason, string TAFor, string TaPosition, string EquipmentID, string EquipmentDesc, string EquipmentOperator, string PartID, string PartDesc, string StoreroomID, string ItemDesc, string BatchReviewed, string BatchReviewer, DateTime BatchReviewedDateBegin, DateTime BatchReviewedDateEnd, string BatchApproved, string BatchApprover, DateTime BatchApprovedDateBegin, DateTime BatchApprovedDateEnd, string FundSource, string WorkOrder, string OrgCode, string FundGroup, string ControlSection, string EquipNum, int UserID)
        {
            return session.ExecuteSproc("filter_GetFilteredDailyTimesList", new OperandValue(BatchSentYNB), new OperandValue(BatchNumLike), new OperandValue(StartDate), new OperandValue(EndDate), new OperandValue(WeatherID), new OperandValue(CrewGroupID), new OperandValue(ChargeCode), new OperandValue(JobID), new OperandValue(FunctionCode), new OperandValue(Notes), new OperandValue(PersonnelID), new OperandValue(PayReason), new OperandValue(TAFor), new OperandValue(TaPosition), new OperandValue(EquipmentID), new OperandValue(EquipmentDesc), new OperandValue(EquipmentOperator), new OperandValue(PartID), new OperandValue(PartDesc), new OperandValue(StoreroomID), new OperandValue(ItemDesc), new OperandValue(BatchReviewed), new OperandValue(BatchReviewer), new OperandValue(BatchReviewedDateBegin), new OperandValue(BatchReviewedDateEnd), new OperandValue(BatchApproved), new OperandValue(BatchApprover), new OperandValue(BatchApprovedDateBegin), new OperandValue(BatchApprovedDateEnd), new OperandValue(FundSource), new OperandValue(WorkOrder), new OperandValue(OrgCode), new OperandValue(FundGroup), new OperandValue(ControlSection), new OperandValue(EquipNum), new OperandValue(UserID));
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredDistrictList(Session session, string ID, string Descr, string Area, string AreaDescr, string Active)
        {
            return session.ExecuteSproc("filter_GetFilteredDistrictList", new OperandValue(ID), new OperandValue(Descr), new OperandValue(Area), new OperandValue(AreaDescr), new OperandValue(Active));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredDistrictListResult> Execfilter_GetFilteredDistrictListIntoObjects(Session session, string ID, string Descr, string Area, string AreaDescr, string Active)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredDistrictListResult>("filter_GetFilteredDistrictList", new OperandValue(ID), new OperandValue(Descr), new OperandValue(Area), new OperandValue(AreaDescr), new OperandValue(Active));
        }
        public static XPDataView Execfilter_GetFilteredDistrictListIntoDataView(Session session, string ID, string Descr, string Area, string AreaDescr, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredDistrictList", new OperandValue(ID), new OperandValue(Descr), new OperandValue(Area), new OperandValue(AreaDescr), new OperandValue(Active));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredDistrictListResult)), sprocData);
        }
        public static void Execfilter_GetFilteredDistrictListIntoDataView(XPDataView dataView, Session session, string ID, string Descr, string Area, string AreaDescr, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredDistrictList", new OperandValue(ID), new OperandValue(Descr), new OperandValue(Area), new OperandValue(AreaDescr), new OperandValue(Active));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredDistrictListResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredEquipmentNumbers(Session session, string IDContains, string DescrContains, string Active)
        {
            return session.ExecuteSproc("filter_GetFilteredEquipmentNumbers", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredEquipmentNumbersResult> Execfilter_GetFilteredEquipmentNumbersIntoObjects(Session session, string IDContains, string DescrContains, string Active)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredEquipmentNumbersResult>("filter_GetFilteredEquipmentNumbers", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
        }
        public static XPDataView Execfilter_GetFilteredEquipmentNumbersIntoDataView(Session session, string IDContains, string DescrContains, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredEquipmentNumbers", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredEquipmentNumbersResult)), sprocData);
        }
        public static void Execfilter_GetFilteredEquipmentNumbersIntoDataView(XPDataView dataView, Session session, string IDContains, string DescrContains, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredEquipmentNumbers", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredEquipmentNumbersResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredFormList(Session session, string IDContains, string DescrContains)
        {
            return session.ExecuteSproc("filter_GetFilteredFormList", new OperandValue(IDContains), new OperandValue(DescrContains));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredFormListResult> Execfilter_GetFilteredFormListIntoObjects(Session session, string IDContains, string DescrContains)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredFormListResult>("filter_GetFilteredFormList", new OperandValue(IDContains), new OperandValue(DescrContains));
        }
        public static XPDataView Execfilter_GetFilteredFormListIntoDataView(Session session, string IDContains, string DescrContains)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredFormList", new OperandValue(IDContains), new OperandValue(DescrContains));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredFormListResult)), sprocData);
        }
        public static void Execfilter_GetFilteredFormListIntoDataView(XPDataView dataView, Session session, string IDContains, string DescrContains)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredFormList", new OperandValue(IDContains), new OperandValue(DescrContains));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredFormListResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredFreightOnBoard(Session session, string IDContains, string DescrContains, string Active)
        {
            return session.ExecuteSproc("filter_GetFilteredFreightOnBoard", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredFreightOnBoardResult> Execfilter_GetFilteredFreightOnBoardIntoObjects(Session session, string IDContains, string DescrContains, string Active)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredFreightOnBoardResult>("filter_GetFilteredFreightOnBoard", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
        }
        public static XPDataView Execfilter_GetFilteredFreightOnBoardIntoDataView(Session session, string IDContains, string DescrContains, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredFreightOnBoard", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredFreightOnBoardResult)), sprocData);
        }
        public static void Execfilter_GetFilteredFreightOnBoardIntoDataView(XPDataView dataView, Session session, string IDContains, string DescrContains, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredFreightOnBoard", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredFreightOnBoardResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredFreightTerms(Session session, string IDContains, string DescrContains, string Active)
        {
            return session.ExecuteSproc("filter_GetFilteredFreightTerms", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredFreightTermsResult> Execfilter_GetFilteredFreightTermsIntoObjects(Session session, string IDContains, string DescrContains, string Active)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredFreightTermsResult>("filter_GetFilteredFreightTerms", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
        }
        public static XPDataView Execfilter_GetFilteredFreightTermsIntoDataView(Session session, string IDContains, string DescrContains, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredFreightTerms", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredFreightTermsResult)), sprocData);
        }
        public static void Execfilter_GetFilteredFreightTermsIntoDataView(XPDataView dataView, Session session, string IDContains, string DescrContains, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredFreightTerms", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredFreightTermsResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredFundingGroupCodes(Session session, string IDContains, string DescrContains, string Active)
        {
            return session.ExecuteSproc("filter_GetFilteredFundingGroupCodes", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredFundingGroupCodesResult> Execfilter_GetFilteredFundingGroupCodesIntoObjects(Session session, string IDContains, string DescrContains, string Active)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredFundingGroupCodesResult>("filter_GetFilteredFundingGroupCodes", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
        }
        public static XPDataView Execfilter_GetFilteredFundingGroupCodesIntoDataView(Session session, string IDContains, string DescrContains, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredFundingGroupCodes", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredFundingGroupCodesResult)), sprocData);
        }
        public static void Execfilter_GetFilteredFundingGroupCodesIntoDataView(XPDataView dataView, Session session, string IDContains, string DescrContains, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredFundingGroupCodes", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredFundingGroupCodesResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredFundSourceLinkList(Session session, int FundSourceID)
        {
            return session.ExecuteSproc("filter_GetFilteredFundSourceLinkList", new OperandValue(FundSourceID));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredFundSourceLinkListResult> Execfilter_GetFilteredFundSourceLinkListIntoObjects(Session session, int FundSourceID)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredFundSourceLinkListResult>("filter_GetFilteredFundSourceLinkList", new OperandValue(FundSourceID));
        }
        public static XPDataView Execfilter_GetFilteredFundSourceLinkListIntoDataView(Session session, int FundSourceID)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredFundSourceLinkList", new OperandValue(FundSourceID));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredFundSourceLinkListResult)), sprocData);
        }
        public static void Execfilter_GetFilteredFundSourceLinkListIntoDataView(XPDataView dataView, Session session, int FundSourceID)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredFundSourceLinkList", new OperandValue(FundSourceID));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredFundSourceLinkListResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredFundSourceList(Session session, string IDContains, string DescrContains, string Active, string WorkOrderID, string WorkOrderDesc)
        {
            return session.ExecuteSproc("filter_GetFilteredFundSourceList", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active), new OperandValue(WorkOrderID), new OperandValue(WorkOrderDesc));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredFundSourceListResult> Execfilter_GetFilteredFundSourceListIntoObjects(Session session, string IDContains, string DescrContains, string Active, string WorkOrderID, string WorkOrderDesc)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredFundSourceListResult>("filter_GetFilteredFundSourceList", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active), new OperandValue(WorkOrderID), new OperandValue(WorkOrderDesc));
        }
        public static XPDataView Execfilter_GetFilteredFundSourceListIntoDataView(Session session, string IDContains, string DescrContains, string Active, string WorkOrderID, string WorkOrderDesc)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredFundSourceList", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active), new OperandValue(WorkOrderID), new OperandValue(WorkOrderDesc));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredFundSourceListResult)), sprocData);
        }
        public static void Execfilter_GetFilteredFundSourceListIntoDataView(XPDataView dataView, Session session, string IDContains, string DescrContains, string Active, string WorkOrderID, string WorkOrderDesc)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredFundSourceList", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active), new OperandValue(WorkOrderID), new OperandValue(WorkOrderDesc));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredFundSourceListResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredGriefLogFaults(Session session, string IDContains, string DescrContains, string Active)
        {
            return session.ExecuteSproc("filter_GetFilteredGriefLogFaults", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredGriefLogFaultsResult> Execfilter_GetFilteredGriefLogFaultsIntoObjects(Session session, string IDContains, string DescrContains, string Active)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredGriefLogFaultsResult>("filter_GetFilteredGriefLogFaults", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
        }
        public static XPDataView Execfilter_GetFilteredGriefLogFaultsIntoDataView(Session session, string IDContains, string DescrContains, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredGriefLogFaults", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredGriefLogFaultsResult)), sprocData);
        }
        public static void Execfilter_GetFilteredGriefLogFaultsIntoDataView(XPDataView dataView, Session session, string IDContains, string DescrContains, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredGriefLogFaults", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredGriefLogFaultsResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredGriefLogs(Session session, string GriefID, DateTime DateCreatedBegin, DateTime DateCreatedEnd, string PersonID, string PONumber, string VendorID, DateTime DateResolvedBegin, DateTime DateResolvedEnd, DateTime DateClosedBegin, DateTime DateClosedEnd, string BuyerID, string FaultID, string ClosedYNB, int UserID, string HasAttachments)
        {
            return session.ExecuteSproc("filter_GetFilteredGriefLogs", new OperandValue(GriefID), new OperandValue(DateCreatedBegin), new OperandValue(DateCreatedEnd), new OperandValue(PersonID), new OperandValue(PONumber), new OperandValue(VendorID), new OperandValue(DateResolvedBegin), new OperandValue(DateResolvedEnd), new OperandValue(DateClosedBegin), new OperandValue(DateClosedEnd), new OperandValue(BuyerID), new OperandValue(FaultID), new OperandValue(ClosedYNB), new OperandValue(UserID), new OperandValue(HasAttachments));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredGriefLogsResult> Execfilter_GetFilteredGriefLogsIntoObjects(Session session, string GriefID, DateTime DateCreatedBegin, DateTime DateCreatedEnd, string PersonID, string PONumber, string VendorID, DateTime DateResolvedBegin, DateTime DateResolvedEnd, DateTime DateClosedBegin, DateTime DateClosedEnd, string BuyerID, string FaultID, string ClosedYNB, int UserID, string HasAttachments)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredGriefLogsResult>("filter_GetFilteredGriefLogs", new OperandValue(GriefID), new OperandValue(DateCreatedBegin), new OperandValue(DateCreatedEnd), new OperandValue(PersonID), new OperandValue(PONumber), new OperandValue(VendorID), new OperandValue(DateResolvedBegin), new OperandValue(DateResolvedEnd), new OperandValue(DateClosedBegin), new OperandValue(DateClosedEnd), new OperandValue(BuyerID), new OperandValue(FaultID), new OperandValue(ClosedYNB), new OperandValue(UserID), new OperandValue(HasAttachments));
        }
        public static XPDataView Execfilter_GetFilteredGriefLogsIntoDataView(Session session, string GriefID, DateTime DateCreatedBegin, DateTime DateCreatedEnd, string PersonID, string PONumber, string VendorID, DateTime DateResolvedBegin, DateTime DateResolvedEnd, DateTime DateClosedBegin, DateTime DateClosedEnd, string BuyerID, string FaultID, string ClosedYNB, int UserID, string HasAttachments)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredGriefLogs", new OperandValue(GriefID), new OperandValue(DateCreatedBegin), new OperandValue(DateCreatedEnd), new OperandValue(PersonID), new OperandValue(PONumber), new OperandValue(VendorID), new OperandValue(DateResolvedBegin), new OperandValue(DateResolvedEnd), new OperandValue(DateClosedBegin), new OperandValue(DateClosedEnd), new OperandValue(BuyerID), new OperandValue(FaultID), new OperandValue(ClosedYNB), new OperandValue(UserID), new OperandValue(HasAttachments));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredGriefLogsResult)), sprocData);
        }
        public static void Execfilter_GetFilteredGriefLogsIntoDataView(XPDataView dataView, Session session, string GriefID, DateTime DateCreatedBegin, DateTime DateCreatedEnd, string PersonID, string PONumber, string VendorID, DateTime DateResolvedBegin, DateTime DateResolvedEnd, DateTime DateClosedBegin, DateTime DateClosedEnd, string BuyerID, string FaultID, string ClosedYNB, int UserID, string HasAttachments)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredGriefLogs", new OperandValue(GriefID), new OperandValue(DateCreatedBegin), new OperandValue(DateCreatedEnd), new OperandValue(PersonID), new OperandValue(PONumber), new OperandValue(VendorID), new OperandValue(DateResolvedBegin), new OperandValue(DateResolvedEnd), new OperandValue(DateClosedBegin), new OperandValue(DateClosedEnd), new OperandValue(BuyerID), new OperandValue(FaultID), new OperandValue(ClosedYNB), new OperandValue(UserID), new OperandValue(HasAttachments));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredGriefLogsResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredGroupsList(Session session, string ActiveSetting, string GroupID, string Descr, string Supervisor, string UserID, string AreaID, int AreaUserID)
        {
            return session.ExecuteSproc("filter_GetFilteredGroupsList", new OperandValue(ActiveSetting), new OperandValue(GroupID), new OperandValue(Descr), new OperandValue(Supervisor), new OperandValue(UserID), new OperandValue(AreaID), new OperandValue(AreaUserID));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredGroupsListResult> Execfilter_GetFilteredGroupsListIntoObjects(Session session, string ActiveSetting, string GroupID, string Descr, string Supervisor, string UserID, string AreaID, int AreaUserID)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredGroupsListResult>("filter_GetFilteredGroupsList", new OperandValue(ActiveSetting), new OperandValue(GroupID), new OperandValue(Descr), new OperandValue(Supervisor), new OperandValue(UserID), new OperandValue(AreaID), new OperandValue(AreaUserID));
        }
        public static XPDataView Execfilter_GetFilteredGroupsListIntoDataView(Session session, string ActiveSetting, string GroupID, string Descr, string Supervisor, string UserID, string AreaID, int AreaUserID)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredGroupsList", new OperandValue(ActiveSetting), new OperandValue(GroupID), new OperandValue(Descr), new OperandValue(Supervisor), new OperandValue(UserID), new OperandValue(AreaID), new OperandValue(AreaUserID));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredGroupsListResult)), sprocData);
        }
        public static void Execfilter_GetFilteredGroupsListIntoDataView(XPDataView dataView, Session session, string ActiveSetting, string GroupID, string Descr, string Supervisor, string UserID, string AreaID, int AreaUserID)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredGroupsList", new OperandValue(ActiveSetting), new OperandValue(GroupID), new OperandValue(Descr), new OperandValue(Supervisor), new OperandValue(UserID), new OperandValue(AreaID), new OperandValue(AreaUserID));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredGroupsListResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredGroupsListOld(Session session, string ActiveSetting, string GroupID, string Descr, string Supervisor, string UserID)
        {
            return session.ExecuteSproc("filter_GetFilteredGroupsListOld", new OperandValue(ActiveSetting), new OperandValue(GroupID), new OperandValue(Descr), new OperandValue(Supervisor), new OperandValue(UserID));
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredIncidentIDs(Session session, string IDContains, string DescrContains, string Active)
        {
            return session.ExecuteSproc("filter_GetFilteredIncidentIDs", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredIncidentIDsResult> Execfilter_GetFilteredIncidentIDsIntoObjects(Session session, string IDContains, string DescrContains, string Active)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredIncidentIDsResult>("filter_GetFilteredIncidentIDs", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
        }
        public static XPDataView Execfilter_GetFilteredIncidentIDsIntoDataView(Session session, string IDContains, string DescrContains, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredIncidentIDs", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredIncidentIDsResult)), sprocData);
        }
        public static void Execfilter_GetFilteredIncidentIDsIntoDataView(XPDataView dataView, Session session, string IDContains, string DescrContains, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredIncidentIDs", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredIncidentIDsResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredIncidentLogsList(Session session, string IncidentNum, string IncidentID, string IncidentTypeID, string IncidentSourceID, string IncidentResponseID, string ShiftID, string IncidentSummary, DateTime DTReportedBegin, DateTime DTReportedEnd, string ReportedBy, DateTime DTClosedBegin, DateTime DTClosedEnd, string ClosedBy, string ClosedYNB, string Synopsis, string Resolution, string Interim, string Permenant, string Verification, string Prevention, int UserID, string StateRouteID, string AreaID, string CostCodeID, string FundSrcCodeID, string WorkOrderCodeID, string WorkOpID, string OrgCodeID, string FundGroupID, string ControlSectionID, string EquipNumID, string AttachmentsYNB)
        {
            return session.ExecuteSproc("filter_GetFilteredIncidentLogsList", new OperandValue(IncidentNum), new OperandValue(IncidentID), new OperandValue(IncidentTypeID), new OperandValue(IncidentSourceID), new OperandValue(IncidentResponseID), new OperandValue(ShiftID), new OperandValue(IncidentSummary), new OperandValue(DTReportedBegin), new OperandValue(DTReportedEnd), new OperandValue(ReportedBy), new OperandValue(DTClosedBegin), new OperandValue(DTClosedEnd), new OperandValue(ClosedBy), new OperandValue(ClosedYNB), new OperandValue(Synopsis), new OperandValue(Resolution), new OperandValue(Interim), new OperandValue(Permenant), new OperandValue(Verification), new OperandValue(Prevention), new OperandValue(UserID), new OperandValue(StateRouteID), new OperandValue(AreaID), new OperandValue(CostCodeID), new OperandValue(FundSrcCodeID), new OperandValue(WorkOrderCodeID), new OperandValue(WorkOpID), new OperandValue(OrgCodeID), new OperandValue(FundGroupID), new OperandValue(ControlSectionID), new OperandValue(EquipNumID), new OperandValue(AttachmentsYNB));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredIncidentLogsListResult> Execfilter_GetFilteredIncidentLogsListIntoObjects(Session session, string IncidentNum, string IncidentID, string IncidentTypeID, string IncidentSourceID, string IncidentResponseID, string ShiftID, string IncidentSummary, DateTime DTReportedBegin, DateTime DTReportedEnd, string ReportedBy, DateTime DTClosedBegin, DateTime DTClosedEnd, string ClosedBy, string ClosedYNB, string Synopsis, string Resolution, string Interim, string Permenant, string Verification, string Prevention, int UserID, string StateRouteID, string AreaID, string CostCodeID, string FundSrcCodeID, string WorkOrderCodeID, string WorkOpID, string OrgCodeID, string FundGroupID, string ControlSectionID, string EquipNumID, string AttachmentsYNB)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredIncidentLogsListResult>("filter_GetFilteredIncidentLogsList", new OperandValue(IncidentNum), new OperandValue(IncidentID), new OperandValue(IncidentTypeID), new OperandValue(IncidentSourceID), new OperandValue(IncidentResponseID), new OperandValue(ShiftID), new OperandValue(IncidentSummary), new OperandValue(DTReportedBegin), new OperandValue(DTReportedEnd), new OperandValue(ReportedBy), new OperandValue(DTClosedBegin), new OperandValue(DTClosedEnd), new OperandValue(ClosedBy), new OperandValue(ClosedYNB), new OperandValue(Synopsis), new OperandValue(Resolution), new OperandValue(Interim), new OperandValue(Permenant), new OperandValue(Verification), new OperandValue(Prevention), new OperandValue(UserID), new OperandValue(StateRouteID), new OperandValue(AreaID), new OperandValue(CostCodeID), new OperandValue(FundSrcCodeID), new OperandValue(WorkOrderCodeID), new OperandValue(WorkOpID), new OperandValue(OrgCodeID), new OperandValue(FundGroupID), new OperandValue(ControlSectionID), new OperandValue(EquipNumID), new OperandValue(AttachmentsYNB));
        }
        public static XPDataView Execfilter_GetFilteredIncidentLogsListIntoDataView(Session session, string IncidentNum, string IncidentID, string IncidentTypeID, string IncidentSourceID, string IncidentResponseID, string ShiftID, string IncidentSummary, DateTime DTReportedBegin, DateTime DTReportedEnd, string ReportedBy, DateTime DTClosedBegin, DateTime DTClosedEnd, string ClosedBy, string ClosedYNB, string Synopsis, string Resolution, string Interim, string Permenant, string Verification, string Prevention, int UserID, string StateRouteID, string AreaID, string CostCodeID, string FundSrcCodeID, string WorkOrderCodeID, string WorkOpID, string OrgCodeID, string FundGroupID, string ControlSectionID, string EquipNumID, string AttachmentsYNB)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredIncidentLogsList", new OperandValue(IncidentNum), new OperandValue(IncidentID), new OperandValue(IncidentTypeID), new OperandValue(IncidentSourceID), new OperandValue(IncidentResponseID), new OperandValue(ShiftID), new OperandValue(IncidentSummary), new OperandValue(DTReportedBegin), new OperandValue(DTReportedEnd), new OperandValue(ReportedBy), new OperandValue(DTClosedBegin), new OperandValue(DTClosedEnd), new OperandValue(ClosedBy), new OperandValue(ClosedYNB), new OperandValue(Synopsis), new OperandValue(Resolution), new OperandValue(Interim), new OperandValue(Permenant), new OperandValue(Verification), new OperandValue(Prevention), new OperandValue(UserID), new OperandValue(StateRouteID), new OperandValue(AreaID), new OperandValue(CostCodeID), new OperandValue(FundSrcCodeID), new OperandValue(WorkOrderCodeID), new OperandValue(WorkOpID), new OperandValue(OrgCodeID), new OperandValue(FundGroupID), new OperandValue(ControlSectionID), new OperandValue(EquipNumID), new OperandValue(AttachmentsYNB));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredIncidentLogsListResult)), sprocData);
        }
        public static void Execfilter_GetFilteredIncidentLogsListIntoDataView(XPDataView dataView, Session session, string IncidentNum, string IncidentID, string IncidentTypeID, string IncidentSourceID, string IncidentResponseID, string ShiftID, string IncidentSummary, DateTime DTReportedBegin, DateTime DTReportedEnd, string ReportedBy, DateTime DTClosedBegin, DateTime DTClosedEnd, string ClosedBy, string ClosedYNB, string Synopsis, string Resolution, string Interim, string Permenant, string Verification, string Prevention, int UserID, string StateRouteID, string AreaID, string CostCodeID, string FundSrcCodeID, string WorkOrderCodeID, string WorkOpID, string OrgCodeID, string FundGroupID, string ControlSectionID, string EquipNumID, string AttachmentsYNB)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredIncidentLogsList", new OperandValue(IncidentNum), new OperandValue(IncidentID), new OperandValue(IncidentTypeID), new OperandValue(IncidentSourceID), new OperandValue(IncidentResponseID), new OperandValue(ShiftID), new OperandValue(IncidentSummary), new OperandValue(DTReportedBegin), new OperandValue(DTReportedEnd), new OperandValue(ReportedBy), new OperandValue(DTClosedBegin), new OperandValue(DTClosedEnd), new OperandValue(ClosedBy), new OperandValue(ClosedYNB), new OperandValue(Synopsis), new OperandValue(Resolution), new OperandValue(Interim), new OperandValue(Permenant), new OperandValue(Verification), new OperandValue(Prevention), new OperandValue(UserID), new OperandValue(StateRouteID), new OperandValue(AreaID), new OperandValue(CostCodeID), new OperandValue(FundSrcCodeID), new OperandValue(WorkOrderCodeID), new OperandValue(WorkOpID), new OperandValue(OrgCodeID), new OperandValue(FundGroupID), new OperandValue(ControlSectionID), new OperandValue(EquipNumID), new OperandValue(AttachmentsYNB));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredIncidentLogsListResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredIncidentLogsListOld(Session session, string IncidentNum, string IncidentID, string IncidentTypeID, string IncidentSourceID, string IncidentResponseID, string ShiftID, string IncidentSummary, DateTime DTReportedBegin, DateTime DTReportedEnd, string ReportedBy, DateTime DTClosedBegin, DateTime DTClosedEnd, string ClosedBy, string ClosedYNB, string Synopsis, string Resolution, string Interim, string Permenant, string Verification, string Prevention, int UserID, string StateRouteID, string AreaID, string CostCodeID, string FundSrcCodeID, string WorkOrderCodeID, string WorkOpID, string OrgCodeID, string FundGroupID, string ControlSectionID, string EquipNumID, string AttachmentsYNB)
        {
            return session.ExecuteSproc("filter_GetFilteredIncidentLogsListOld", new OperandValue(IncidentNum), new OperandValue(IncidentID), new OperandValue(IncidentTypeID), new OperandValue(IncidentSourceID), new OperandValue(IncidentResponseID), new OperandValue(ShiftID), new OperandValue(IncidentSummary), new OperandValue(DTReportedBegin), new OperandValue(DTReportedEnd), new OperandValue(ReportedBy), new OperandValue(DTClosedBegin), new OperandValue(DTClosedEnd), new OperandValue(ClosedBy), new OperandValue(ClosedYNB), new OperandValue(Synopsis), new OperandValue(Resolution), new OperandValue(Interim), new OperandValue(Permenant), new OperandValue(Verification), new OperandValue(Prevention), new OperandValue(UserID), new OperandValue(StateRouteID), new OperandValue(AreaID), new OperandValue(CostCodeID), new OperandValue(FundSrcCodeID), new OperandValue(WorkOrderCodeID), new OperandValue(WorkOpID), new OperandValue(OrgCodeID), new OperandValue(FundGroupID), new OperandValue(ControlSectionID), new OperandValue(EquipNumID), new OperandValue(AttachmentsYNB));
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredIncidentResponses(Session session, string IDContains, string DescrContains, string Active)
        {
            return session.ExecuteSproc("filter_GetFilteredIncidentResponses", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredIncidentResponsesResult> Execfilter_GetFilteredIncidentResponsesIntoObjects(Session session, string IDContains, string DescrContains, string Active)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredIncidentResponsesResult>("filter_GetFilteredIncidentResponses", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
        }
        public static XPDataView Execfilter_GetFilteredIncidentResponsesIntoDataView(Session session, string IDContains, string DescrContains, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredIncidentResponses", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredIncidentResponsesResult)), sprocData);
        }
        public static void Execfilter_GetFilteredIncidentResponsesIntoDataView(XPDataView dataView, Session session, string IDContains, string DescrContains, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredIncidentResponses", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredIncidentResponsesResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredIncidentSources(Session session, string IDContains, string DescrContains, string Active)
        {
            return session.ExecuteSproc("filter_GetFilteredIncidentSources", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredIncidentSourcesResult> Execfilter_GetFilteredIncidentSourcesIntoObjects(Session session, string IDContains, string DescrContains, string Active)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredIncidentSourcesResult>("filter_GetFilteredIncidentSources", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
        }
        public static XPDataView Execfilter_GetFilteredIncidentSourcesIntoDataView(Session session, string IDContains, string DescrContains, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredIncidentSources", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredIncidentSourcesResult)), sprocData);
        }
        public static void Execfilter_GetFilteredIncidentSourcesIntoDataView(XPDataView dataView, Session session, string IDContains, string DescrContains, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredIncidentSources", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredIncidentSourcesResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredIncidentTypes(Session session, string IDContains, string DescrContains, string Active)
        {
            return session.ExecuteSproc("filter_GetFilteredIncidentTypes", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredIncidentTypesResult> Execfilter_GetFilteredIncidentTypesIntoObjects(Session session, string IDContains, string DescrContains, string Active)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredIncidentTypesResult>("filter_GetFilteredIncidentTypes", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
        }
        public static XPDataView Execfilter_GetFilteredIncidentTypesIntoDataView(Session session, string IDContains, string DescrContains, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredIncidentTypes", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredIncidentTypesResult)), sprocData);
        }
        public static void Execfilter_GetFilteredIncidentTypesIntoDataView(XPDataView dataView, Session session, string IDContains, string DescrContains, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredIncidentTypes", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredIncidentTypesResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredJobEquipmentList(Session session, string ID, string Descr, string ActiveYNB)
        {
            return session.ExecuteSproc("filter_GetFilteredJobEquipmentList", new OperandValue(ID), new OperandValue(Descr), new OperandValue(ActiveYNB));
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredJobListForScheduler(Session session, int MatchJobType, int MatchJobAgainst, string JobIDLike, string FromHistoryYNB, string IsIssuedYNB, DateTime StartingReqDate, DateTime EndingReqDate, DateTime StartDateStart, DateTime StartDateEnd, string TitleContains, string MatchLaborClass, string MatchStatus, string MatchGroup, string MatchPriority, string MatchReason, string MatchArea, string MatchObjectType, string MachineIDContains, string MatchOutcomeCode, string ObjIDDescrContains, string MatchTaskID, int UserID, DateTime CompStartDate, DateTime CompEndDate, string JobCrew, string JobSupervisor, string MatchStateRoute, string MatchLocation, string PostedBy, DateTime PostStartDate, DateTime PostEndDate, string MatchWorkType, DateTime IssuedStartDate, DateTime IssuedEndDate, string RequestedBy, string RouteTo, string Notes, string MiscRef)
        {
            return session.ExecuteSproc("filter_GetFilteredJobListForScheduler", new OperandValue(MatchJobType), new OperandValue(MatchJobAgainst), new OperandValue(JobIDLike), new OperandValue(FromHistoryYNB), new OperandValue(IsIssuedYNB), new OperandValue(StartingReqDate), new OperandValue(EndingReqDate), new OperandValue(StartDateStart), new OperandValue(StartDateEnd), new OperandValue(TitleContains), new OperandValue(MatchLaborClass), new OperandValue(MatchStatus), new OperandValue(MatchGroup), new OperandValue(MatchPriority), new OperandValue(MatchReason), new OperandValue(MatchArea), new OperandValue(MatchObjectType), new OperandValue(MachineIDContains), new OperandValue(MatchOutcomeCode), new OperandValue(ObjIDDescrContains), new OperandValue(MatchTaskID), new OperandValue(UserID), new OperandValue(CompStartDate), new OperandValue(CompEndDate), new OperandValue(JobCrew), new OperandValue(JobSupervisor), new OperandValue(MatchStateRoute), new OperandValue(MatchLocation), new OperandValue(PostedBy), new OperandValue(PostStartDate), new OperandValue(PostEndDate), new OperandValue(MatchWorkType), new OperandValue(IssuedStartDate), new OperandValue(IssuedEndDate), new OperandValue(RequestedBy), new OperandValue(RouteTo), new OperandValue(Notes), new OperandValue(MiscRef));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredJobListForSchedulerResult> Execfilter_GetFilteredJobListForSchedulerIntoObjects(Session session, int MatchJobType, int MatchJobAgainst, string JobIDLike, string FromHistoryYNB, string IsIssuedYNB, DateTime StartingReqDate, DateTime EndingReqDate, DateTime StartDateStart, DateTime StartDateEnd, string TitleContains, string MatchLaborClass, string MatchStatus, string MatchGroup, string MatchPriority, string MatchReason, string MatchArea, string MatchObjectType, string MachineIDContains, string MatchOutcomeCode, string ObjIDDescrContains, string MatchTaskID, int UserID, DateTime CompStartDate, DateTime CompEndDate, string JobCrew, string JobSupervisor, string MatchStateRoute, string MatchLocation, string PostedBy, DateTime PostStartDate, DateTime PostEndDate, string MatchWorkType, DateTime IssuedStartDate, DateTime IssuedEndDate, string RequestedBy, string RouteTo, string Notes, string MiscRef)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredJobListForSchedulerResult>("filter_GetFilteredJobListForScheduler", new OperandValue(MatchJobType), new OperandValue(MatchJobAgainst), new OperandValue(JobIDLike), new OperandValue(FromHistoryYNB), new OperandValue(IsIssuedYNB), new OperandValue(StartingReqDate), new OperandValue(EndingReqDate), new OperandValue(StartDateStart), new OperandValue(StartDateEnd), new OperandValue(TitleContains), new OperandValue(MatchLaborClass), new OperandValue(MatchStatus), new OperandValue(MatchGroup), new OperandValue(MatchPriority), new OperandValue(MatchReason), new OperandValue(MatchArea), new OperandValue(MatchObjectType), new OperandValue(MachineIDContains), new OperandValue(MatchOutcomeCode), new OperandValue(ObjIDDescrContains), new OperandValue(MatchTaskID), new OperandValue(UserID), new OperandValue(CompStartDate), new OperandValue(CompEndDate), new OperandValue(JobCrew), new OperandValue(JobSupervisor), new OperandValue(MatchStateRoute), new OperandValue(MatchLocation), new OperandValue(PostedBy), new OperandValue(PostStartDate), new OperandValue(PostEndDate), new OperandValue(MatchWorkType), new OperandValue(IssuedStartDate), new OperandValue(IssuedEndDate), new OperandValue(RequestedBy), new OperandValue(RouteTo), new OperandValue(Notes), new OperandValue(MiscRef));
        }
        public static XPDataView Execfilter_GetFilteredJobListForSchedulerIntoDataView(Session session, int MatchJobType, int MatchJobAgainst, string JobIDLike, string FromHistoryYNB, string IsIssuedYNB, DateTime StartingReqDate, DateTime EndingReqDate, DateTime StartDateStart, DateTime StartDateEnd, string TitleContains, string MatchLaborClass, string MatchStatus, string MatchGroup, string MatchPriority, string MatchReason, string MatchArea, string MatchObjectType, string MachineIDContains, string MatchOutcomeCode, string ObjIDDescrContains, string MatchTaskID, int UserID, DateTime CompStartDate, DateTime CompEndDate, string JobCrew, string JobSupervisor, string MatchStateRoute, string MatchLocation, string PostedBy, DateTime PostStartDate, DateTime PostEndDate, string MatchWorkType, DateTime IssuedStartDate, DateTime IssuedEndDate, string RequestedBy, string RouteTo, string Notes, string MiscRef)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredJobListForScheduler", new OperandValue(MatchJobType), new OperandValue(MatchJobAgainst), new OperandValue(JobIDLike), new OperandValue(FromHistoryYNB), new OperandValue(IsIssuedYNB), new OperandValue(StartingReqDate), new OperandValue(EndingReqDate), new OperandValue(StartDateStart), new OperandValue(StartDateEnd), new OperandValue(TitleContains), new OperandValue(MatchLaborClass), new OperandValue(MatchStatus), new OperandValue(MatchGroup), new OperandValue(MatchPriority), new OperandValue(MatchReason), new OperandValue(MatchArea), new OperandValue(MatchObjectType), new OperandValue(MachineIDContains), new OperandValue(MatchOutcomeCode), new OperandValue(ObjIDDescrContains), new OperandValue(MatchTaskID), new OperandValue(UserID), new OperandValue(CompStartDate), new OperandValue(CompEndDate), new OperandValue(JobCrew), new OperandValue(JobSupervisor), new OperandValue(MatchStateRoute), new OperandValue(MatchLocation), new OperandValue(PostedBy), new OperandValue(PostStartDate), new OperandValue(PostEndDate), new OperandValue(MatchWorkType), new OperandValue(IssuedStartDate), new OperandValue(IssuedEndDate), new OperandValue(RequestedBy), new OperandValue(RouteTo), new OperandValue(Notes), new OperandValue(MiscRef));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredJobListForSchedulerResult)), sprocData);
        }
        public static void Execfilter_GetFilteredJobListForSchedulerIntoDataView(XPDataView dataView, Session session, int MatchJobType, int MatchJobAgainst, string JobIDLike, string FromHistoryYNB, string IsIssuedYNB, DateTime StartingReqDate, DateTime EndingReqDate, DateTime StartDateStart, DateTime StartDateEnd, string TitleContains, string MatchLaborClass, string MatchStatus, string MatchGroup, string MatchPriority, string MatchReason, string MatchArea, string MatchObjectType, string MachineIDContains, string MatchOutcomeCode, string ObjIDDescrContains, string MatchTaskID, int UserID, DateTime CompStartDate, DateTime CompEndDate, string JobCrew, string JobSupervisor, string MatchStateRoute, string MatchLocation, string PostedBy, DateTime PostStartDate, DateTime PostEndDate, string MatchWorkType, DateTime IssuedStartDate, DateTime IssuedEndDate, string RequestedBy, string RouteTo, string Notes, string MiscRef)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredJobListForScheduler", new OperandValue(MatchJobType), new OperandValue(MatchJobAgainst), new OperandValue(JobIDLike), new OperandValue(FromHistoryYNB), new OperandValue(IsIssuedYNB), new OperandValue(StartingReqDate), new OperandValue(EndingReqDate), new OperandValue(StartDateStart), new OperandValue(StartDateEnd), new OperandValue(TitleContains), new OperandValue(MatchLaborClass), new OperandValue(MatchStatus), new OperandValue(MatchGroup), new OperandValue(MatchPriority), new OperandValue(MatchReason), new OperandValue(MatchArea), new OperandValue(MatchObjectType), new OperandValue(MachineIDContains), new OperandValue(MatchOutcomeCode), new OperandValue(ObjIDDescrContains), new OperandValue(MatchTaskID), new OperandValue(UserID), new OperandValue(CompStartDate), new OperandValue(CompEndDate), new OperandValue(JobCrew), new OperandValue(JobSupervisor), new OperandValue(MatchStateRoute), new OperandValue(MatchLocation), new OperandValue(PostedBy), new OperandValue(PostStartDate), new OperandValue(PostEndDate), new OperandValue(MatchWorkType), new OperandValue(IssuedStartDate), new OperandValue(IssuedEndDate), new OperandValue(RequestedBy), new OperandValue(RouteTo), new OperandValue(Notes), new OperandValue(MiscRef));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredJobListForSchedulerResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredJobReasonList(Session session, string IDContains, string DescrContains, string Active)
        {
            return session.ExecuteSproc("filter_GetFilteredJobReasonList", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredJobReasonListResult> Execfilter_GetFilteredJobReasonListIntoObjects(Session session, string IDContains, string DescrContains, string Active)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredJobReasonListResult>("filter_GetFilteredJobReasonList", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
        }
        public static XPDataView Execfilter_GetFilteredJobReasonListIntoDataView(Session session, string IDContains, string DescrContains, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredJobReasonList", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredJobReasonListResult)), sprocData);
        }
        public static void Execfilter_GetFilteredJobReasonListIntoDataView(XPDataView dataView, Session session, string IDContains, string DescrContains, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredJobReasonList", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredJobReasonListResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredLaborClassList(Session session, string ClassIDContains, string DescrContains, string FirstNameFilter, string LastNameFilter, string Username, decimal StandardRateBegin, decimal StandardRateEnd, decimal OvertimeBegin, decimal OvertimeEnd, decimal OtherBegin, decimal OtherEnd, int UserID, string Active)
        {
            return session.ExecuteSproc("filter_GetFilteredLaborClassList", new OperandValue(ClassIDContains), new OperandValue(DescrContains), new OperandValue(FirstNameFilter), new OperandValue(LastNameFilter), new OperandValue(Username), new OperandValue(StandardRateBegin), new OperandValue(StandardRateEnd), new OperandValue(OvertimeBegin), new OperandValue(OvertimeEnd), new OperandValue(OtherBegin), new OperandValue(OtherEnd), new OperandValue(UserID), new OperandValue(Active));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredLaborClassListResult> Execfilter_GetFilteredLaborClassListIntoObjects(Session session, string ClassIDContains, string DescrContains, string FirstNameFilter, string LastNameFilter, string Username, decimal StandardRateBegin, decimal StandardRateEnd, decimal OvertimeBegin, decimal OvertimeEnd, decimal OtherBegin, decimal OtherEnd, int UserID, string Active)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredLaborClassListResult>("filter_GetFilteredLaborClassList", new OperandValue(ClassIDContains), new OperandValue(DescrContains), new OperandValue(FirstNameFilter), new OperandValue(LastNameFilter), new OperandValue(Username), new OperandValue(StandardRateBegin), new OperandValue(StandardRateEnd), new OperandValue(OvertimeBegin), new OperandValue(OvertimeEnd), new OperandValue(OtherBegin), new OperandValue(OtherEnd), new OperandValue(UserID), new OperandValue(Active));
        }
        public static XPDataView Execfilter_GetFilteredLaborClassListIntoDataView(Session session, string ClassIDContains, string DescrContains, string FirstNameFilter, string LastNameFilter, string Username, decimal StandardRateBegin, decimal StandardRateEnd, decimal OvertimeBegin, decimal OvertimeEnd, decimal OtherBegin, decimal OtherEnd, int UserID, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredLaborClassList", new OperandValue(ClassIDContains), new OperandValue(DescrContains), new OperandValue(FirstNameFilter), new OperandValue(LastNameFilter), new OperandValue(Username), new OperandValue(StandardRateBegin), new OperandValue(StandardRateEnd), new OperandValue(OvertimeBegin), new OperandValue(OvertimeEnd), new OperandValue(OtherBegin), new OperandValue(OtherEnd), new OperandValue(UserID), new OperandValue(Active));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredLaborClassListResult)), sprocData);
        }
        public static void Execfilter_GetFilteredLaborClassListIntoDataView(XPDataView dataView, Session session, string ClassIDContains, string DescrContains, string FirstNameFilter, string LastNameFilter, string Username, decimal StandardRateBegin, decimal StandardRateEnd, decimal OvertimeBegin, decimal OvertimeEnd, decimal OtherBegin, decimal OtherEnd, int UserID, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredLaborClassList", new OperandValue(ClassIDContains), new OperandValue(DescrContains), new OperandValue(FirstNameFilter), new OperandValue(LastNameFilter), new OperandValue(Username), new OperandValue(StandardRateBegin), new OperandValue(StandardRateEnd), new OperandValue(OvertimeBegin), new OperandValue(OvertimeEnd), new OperandValue(OtherBegin), new OperandValue(OtherEnd), new OperandValue(UserID), new OperandValue(Active));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredLaborClassListResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredLocationList(Session session, string LocationID, string Descr, string AreaID, string Active)
        {
            return session.ExecuteSproc("filter_GetFilteredLocationList", new OperandValue(LocationID), new OperandValue(Descr), new OperandValue(AreaID), new OperandValue(Active));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredLocationListResult> Execfilter_GetFilteredLocationListIntoObjects(Session session, string LocationID, string Descr, string AreaID, string Active)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredLocationListResult>("filter_GetFilteredLocationList", new OperandValue(LocationID), new OperandValue(Descr), new OperandValue(AreaID), new OperandValue(Active));
        }
        public static XPDataView Execfilter_GetFilteredLocationListIntoDataView(Session session, string LocationID, string Descr, string AreaID, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredLocationList", new OperandValue(LocationID), new OperandValue(Descr), new OperandValue(AreaID), new OperandValue(Active));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredLocationListResult)), sprocData);
        }
        public static void Execfilter_GetFilteredLocationListIntoDataView(XPDataView dataView, Session session, string LocationID, string Descr, string AreaID, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredLocationList", new OperandValue(LocationID), new OperandValue(Descr), new OperandValue(AreaID), new OperandValue(Active));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredLocationListResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredMaintenanceComponentList(Session session, int UserID)
        {
            return session.ExecuteSproc("filter_GetFilteredMaintenanceComponentList", new OperandValue(UserID));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredMaintenanceComponentListResult> Execfilter_GetFilteredMaintenanceComponentListIntoObjects(Session session, int UserID)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredMaintenanceComponentListResult>("filter_GetFilteredMaintenanceComponentList", new OperandValue(UserID));
        }
        public static XPDataView Execfilter_GetFilteredMaintenanceComponentListIntoDataView(Session session, int UserID)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredMaintenanceComponentList", new OperandValue(UserID));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredMaintenanceComponentListResult)), sprocData);
        }
        public static void Execfilter_GetFilteredMaintenanceComponentListIntoDataView(XPDataView dataView, Session session, int UserID)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredMaintenanceComponentList", new OperandValue(UserID));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredMaintenanceComponentListResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredMaintenanceObjectRoutesList(Session session, string ObjectIDLike, string DescContains, string ActiveYNB, string ChargeAbleYNB, string AreaID, string RespPersonFilter, string StoreroomFilter, string LocationFilter, string TaskID, string ObjectTypeFilter, string ObjectClassFilter, string ProductLineFilter, int UserID, string MiscRef, string Notes, string Remarks, string AssetNum, string ModelNum, string SerialNum, string StateRoute, decimal MileMarkerBegin, decimal MileMarkerEnd, DateTime BuildDateStart, DateTime BuildDateEnd, DateTime InServiceDateStart, DateTime InServiceDateEnd, DateTime WntyDateStart, DateTime WntyDateEnd, DateTime LifeCycleDateStart, DateTime LifeCycleDateEnd, string CostCodeID, string FundingSource, string WorkOrder, string WorkOp, string OrgCode, string FundingGroup, string EquipmentNumber, string ControlSection, string AttachmentsYNB, string ConditionCode, string ParentObjectID, string ComponentType, string OEEFocusYNB, string UOM, string Manufacturer, string Vendor, string MilePostDirection)
        {
            return session.ExecuteSproc("filter_GetFilteredMaintenanceObjectRoutesList", new OperandValue(ObjectIDLike), new OperandValue(DescContains), new OperandValue(ActiveYNB), new OperandValue(ChargeAbleYNB), new OperandValue(AreaID), new OperandValue(RespPersonFilter), new OperandValue(StoreroomFilter), new OperandValue(LocationFilter), new OperandValue(TaskID), new OperandValue(ObjectTypeFilter), new OperandValue(ObjectClassFilter), new OperandValue(ProductLineFilter), new OperandValue(UserID), new OperandValue(MiscRef), new OperandValue(Notes), new OperandValue(Remarks), new OperandValue(AssetNum), new OperandValue(ModelNum), new OperandValue(SerialNum), new OperandValue(StateRoute), new OperandValue(MileMarkerBegin), new OperandValue(MileMarkerEnd), new OperandValue(BuildDateStart), new OperandValue(BuildDateEnd), new OperandValue(InServiceDateStart), new OperandValue(InServiceDateEnd), new OperandValue(WntyDateStart), new OperandValue(WntyDateEnd), new OperandValue(LifeCycleDateStart), new OperandValue(LifeCycleDateEnd), new OperandValue(CostCodeID), new OperandValue(FundingSource), new OperandValue(WorkOrder), new OperandValue(WorkOp), new OperandValue(OrgCode), new OperandValue(FundingGroup), new OperandValue(EquipmentNumber), new OperandValue(ControlSection), new OperandValue(AttachmentsYNB), new OperandValue(ConditionCode), new OperandValue(ParentObjectID), new OperandValue(ComponentType), new OperandValue(OEEFocusYNB), new OperandValue(UOM), new OperandValue(Manufacturer), new OperandValue(Vendor), new OperandValue(MilePostDirection));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredMaintenanceObjectRoutesListResult> Execfilter_GetFilteredMaintenanceObjectRoutesListIntoObjects(Session session, string ObjectIDLike, string DescContains, string ActiveYNB, string ChargeAbleYNB, string AreaID, string RespPersonFilter, string StoreroomFilter, string LocationFilter, string TaskID, string ObjectTypeFilter, string ObjectClassFilter, string ProductLineFilter, int UserID, string MiscRef, string Notes, string Remarks, string AssetNum, string ModelNum, string SerialNum, string StateRoute, decimal MileMarkerBegin, decimal MileMarkerEnd, DateTime BuildDateStart, DateTime BuildDateEnd, DateTime InServiceDateStart, DateTime InServiceDateEnd, DateTime WntyDateStart, DateTime WntyDateEnd, DateTime LifeCycleDateStart, DateTime LifeCycleDateEnd, string CostCodeID, string FundingSource, string WorkOrder, string WorkOp, string OrgCode, string FundingGroup, string EquipmentNumber, string ControlSection, string AttachmentsYNB, string ConditionCode, string ParentObjectID, string ComponentType, string OEEFocusYNB, string UOM, string Manufacturer, string Vendor, string MilePostDirection)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredMaintenanceObjectRoutesListResult>("filter_GetFilteredMaintenanceObjectRoutesList", new OperandValue(ObjectIDLike), new OperandValue(DescContains), new OperandValue(ActiveYNB), new OperandValue(ChargeAbleYNB), new OperandValue(AreaID), new OperandValue(RespPersonFilter), new OperandValue(StoreroomFilter), new OperandValue(LocationFilter), new OperandValue(TaskID), new OperandValue(ObjectTypeFilter), new OperandValue(ObjectClassFilter), new OperandValue(ProductLineFilter), new OperandValue(UserID), new OperandValue(MiscRef), new OperandValue(Notes), new OperandValue(Remarks), new OperandValue(AssetNum), new OperandValue(ModelNum), new OperandValue(SerialNum), new OperandValue(StateRoute), new OperandValue(MileMarkerBegin), new OperandValue(MileMarkerEnd), new OperandValue(BuildDateStart), new OperandValue(BuildDateEnd), new OperandValue(InServiceDateStart), new OperandValue(InServiceDateEnd), new OperandValue(WntyDateStart), new OperandValue(WntyDateEnd), new OperandValue(LifeCycleDateStart), new OperandValue(LifeCycleDateEnd), new OperandValue(CostCodeID), new OperandValue(FundingSource), new OperandValue(WorkOrder), new OperandValue(WorkOp), new OperandValue(OrgCode), new OperandValue(FundingGroup), new OperandValue(EquipmentNumber), new OperandValue(ControlSection), new OperandValue(AttachmentsYNB), new OperandValue(ConditionCode), new OperandValue(ParentObjectID), new OperandValue(ComponentType), new OperandValue(OEEFocusYNB), new OperandValue(UOM), new OperandValue(Manufacturer), new OperandValue(Vendor), new OperandValue(MilePostDirection));
        }
        public static XPDataView Execfilter_GetFilteredMaintenanceObjectRoutesListIntoDataView(Session session, string ObjectIDLike, string DescContains, string ActiveYNB, string ChargeAbleYNB, string AreaID, string RespPersonFilter, string StoreroomFilter, string LocationFilter, string TaskID, string ObjectTypeFilter, string ObjectClassFilter, string ProductLineFilter, int UserID, string MiscRef, string Notes, string Remarks, string AssetNum, string ModelNum, string SerialNum, string StateRoute, decimal MileMarkerBegin, decimal MileMarkerEnd, DateTime BuildDateStart, DateTime BuildDateEnd, DateTime InServiceDateStart, DateTime InServiceDateEnd, DateTime WntyDateStart, DateTime WntyDateEnd, DateTime LifeCycleDateStart, DateTime LifeCycleDateEnd, string CostCodeID, string FundingSource, string WorkOrder, string WorkOp, string OrgCode, string FundingGroup, string EquipmentNumber, string ControlSection, string AttachmentsYNB, string ConditionCode, string ParentObjectID, string ComponentType, string OEEFocusYNB, string UOM, string Manufacturer, string Vendor, string MilePostDirection)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredMaintenanceObjectRoutesList", new OperandValue(ObjectIDLike), new OperandValue(DescContains), new OperandValue(ActiveYNB), new OperandValue(ChargeAbleYNB), new OperandValue(AreaID), new OperandValue(RespPersonFilter), new OperandValue(StoreroomFilter), new OperandValue(LocationFilter), new OperandValue(TaskID), new OperandValue(ObjectTypeFilter), new OperandValue(ObjectClassFilter), new OperandValue(ProductLineFilter), new OperandValue(UserID), new OperandValue(MiscRef), new OperandValue(Notes), new OperandValue(Remarks), new OperandValue(AssetNum), new OperandValue(ModelNum), new OperandValue(SerialNum), new OperandValue(StateRoute), new OperandValue(MileMarkerBegin), new OperandValue(MileMarkerEnd), new OperandValue(BuildDateStart), new OperandValue(BuildDateEnd), new OperandValue(InServiceDateStart), new OperandValue(InServiceDateEnd), new OperandValue(WntyDateStart), new OperandValue(WntyDateEnd), new OperandValue(LifeCycleDateStart), new OperandValue(LifeCycleDateEnd), new OperandValue(CostCodeID), new OperandValue(FundingSource), new OperandValue(WorkOrder), new OperandValue(WorkOp), new OperandValue(OrgCode), new OperandValue(FundingGroup), new OperandValue(EquipmentNumber), new OperandValue(ControlSection), new OperandValue(AttachmentsYNB), new OperandValue(ConditionCode), new OperandValue(ParentObjectID), new OperandValue(ComponentType), new OperandValue(OEEFocusYNB), new OperandValue(UOM), new OperandValue(Manufacturer), new OperandValue(Vendor), new OperandValue(MilePostDirection));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredMaintenanceObjectRoutesListResult)), sprocData);
        }
        public static void Execfilter_GetFilteredMaintenanceObjectRoutesListIntoDataView(XPDataView dataView, Session session, string ObjectIDLike, string DescContains, string ActiveYNB, string ChargeAbleYNB, string AreaID, string RespPersonFilter, string StoreroomFilter, string LocationFilter, string TaskID, string ObjectTypeFilter, string ObjectClassFilter, string ProductLineFilter, int UserID, string MiscRef, string Notes, string Remarks, string AssetNum, string ModelNum, string SerialNum, string StateRoute, decimal MileMarkerBegin, decimal MileMarkerEnd, DateTime BuildDateStart, DateTime BuildDateEnd, DateTime InServiceDateStart, DateTime InServiceDateEnd, DateTime WntyDateStart, DateTime WntyDateEnd, DateTime LifeCycleDateStart, DateTime LifeCycleDateEnd, string CostCodeID, string FundingSource, string WorkOrder, string WorkOp, string OrgCode, string FundingGroup, string EquipmentNumber, string ControlSection, string AttachmentsYNB, string ConditionCode, string ParentObjectID, string ComponentType, string OEEFocusYNB, string UOM, string Manufacturer, string Vendor, string MilePostDirection)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredMaintenanceObjectRoutesList", new OperandValue(ObjectIDLike), new OperandValue(DescContains), new OperandValue(ActiveYNB), new OperandValue(ChargeAbleYNB), new OperandValue(AreaID), new OperandValue(RespPersonFilter), new OperandValue(StoreroomFilter), new OperandValue(LocationFilter), new OperandValue(TaskID), new OperandValue(ObjectTypeFilter), new OperandValue(ObjectClassFilter), new OperandValue(ProductLineFilter), new OperandValue(UserID), new OperandValue(MiscRef), new OperandValue(Notes), new OperandValue(Remarks), new OperandValue(AssetNum), new OperandValue(ModelNum), new OperandValue(SerialNum), new OperandValue(StateRoute), new OperandValue(MileMarkerBegin), new OperandValue(MileMarkerEnd), new OperandValue(BuildDateStart), new OperandValue(BuildDateEnd), new OperandValue(InServiceDateStart), new OperandValue(InServiceDateEnd), new OperandValue(WntyDateStart), new OperandValue(WntyDateEnd), new OperandValue(LifeCycleDateStart), new OperandValue(LifeCycleDateEnd), new OperandValue(CostCodeID), new OperandValue(FundingSource), new OperandValue(WorkOrder), new OperandValue(WorkOp), new OperandValue(OrgCode), new OperandValue(FundingGroup), new OperandValue(EquipmentNumber), new OperandValue(ControlSection), new OperandValue(AttachmentsYNB), new OperandValue(ConditionCode), new OperandValue(ParentObjectID), new OperandValue(ComponentType), new OperandValue(OEEFocusYNB), new OperandValue(UOM), new OperandValue(Manufacturer), new OperandValue(Vendor), new OperandValue(MilePostDirection));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredMaintenanceObjectRoutesListResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredMaintenanceObjectRoutesListOld(Session session, string ObjectIDLike, string DescContains, string ActiveYNB, string ChargeAbleYNB, string AreaID, string RespPersonFilter, string StoreroomFilter, string LocationFilter, string TaskID, string ObjectTypeFilter, string ObjectClassFilter, string ProductLineFilter, int UserID, string MiscRef, string Notes, string Remarks, string AssetNum, string ModelNum, string SerialNum, string StateRoute, decimal MileMarkerBegin, decimal MileMarkerEnd, DateTime BuildDateStart, DateTime BuildDateEnd, DateTime InServiceDateStart, DateTime InServiceDateEnd, DateTime WntyDateStart, DateTime WntyDateEnd, DateTime LifeCycleDateStart, DateTime LifeCycleDateEnd, string CostCodeID, string FundingSource, string WorkOrder, string WorkOp, string OrgCode, string FundingGroup, string EquipmentNumber, string ControlSection, string AttachmentsYNB, string ConditionCode, string ParentObjectID, string ComponentType, string OEEFocusYNB, string UOM, string Manufacturer, string Vendor, string MilePostDirection)
        {
            return session.ExecuteSproc("filter_GetFilteredMaintenanceObjectRoutesListOld", new OperandValue(ObjectIDLike), new OperandValue(DescContains), new OperandValue(ActiveYNB), new OperandValue(ChargeAbleYNB), new OperandValue(AreaID), new OperandValue(RespPersonFilter), new OperandValue(StoreroomFilter), new OperandValue(LocationFilter), new OperandValue(TaskID), new OperandValue(ObjectTypeFilter), new OperandValue(ObjectClassFilter), new OperandValue(ProductLineFilter), new OperandValue(UserID), new OperandValue(MiscRef), new OperandValue(Notes), new OperandValue(Remarks), new OperandValue(AssetNum), new OperandValue(ModelNum), new OperandValue(SerialNum), new OperandValue(StateRoute), new OperandValue(MileMarkerBegin), new OperandValue(MileMarkerEnd), new OperandValue(BuildDateStart), new OperandValue(BuildDateEnd), new OperandValue(InServiceDateStart), new OperandValue(InServiceDateEnd), new OperandValue(WntyDateStart), new OperandValue(WntyDateEnd), new OperandValue(LifeCycleDateStart), new OperandValue(LifeCycleDateEnd), new OperandValue(CostCodeID), new OperandValue(FundingSource), new OperandValue(WorkOrder), new OperandValue(WorkOp), new OperandValue(OrgCode), new OperandValue(FundingGroup), new OperandValue(EquipmentNumber), new OperandValue(ControlSection), new OperandValue(AttachmentsYNB), new OperandValue(ConditionCode), new OperandValue(ParentObjectID), new OperandValue(ComponentType), new OperandValue(OEEFocusYNB), new OperandValue(UOM), new OperandValue(Manufacturer), new OperandValue(Vendor), new OperandValue(MilePostDirection));
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredMaintenanceObjectsList(Session session, string ObjectIDLike, string DescContains, string ActiveYNB, string ChargeAbleYNB, string AreaID, string RespPersonFilter, string StoreroomFilter, string LocationFilter, string TaskID, string ObjectTypeFilter, string ObjectClassFilter, string ProductLineFilter, int UserID, string MiscRef, string Notes, string Remarks, string AssetNum, string ModelNum, string SerialNum, string StateRoute, decimal MileMarkerBegin, decimal MileMarkerEnd, DateTime BuildDateStart, DateTime BuildDateEnd, DateTime InServiceDateStart, DateTime InServiceDateEnd, DateTime WntyDateStart, DateTime WntyDateEnd, DateTime LifeCycleDateStart, DateTime LifeCycleDateEnd, string CostCodeID, string FundingSource, string WorkOrder, string WorkOp, string OrgCode, string FundingGroup, string EquipmentNumber, string ControlSection, string AttachmentsYNB, string ConditionCode, string ParentObjectID, string ComponentType, string OEEFocusYNB, string UOM, string Manufacturer, string Vendor, string MilePostDirection, string ShowRunUnits)
        {
            return session.ExecuteSproc("filter_GetFilteredMaintenanceObjectsList", new OperandValue(ObjectIDLike), new OperandValue(DescContains), new OperandValue(ActiveYNB), new OperandValue(ChargeAbleYNB), new OperandValue(AreaID), new OperandValue(RespPersonFilter), new OperandValue(StoreroomFilter), new OperandValue(LocationFilter), new OperandValue(TaskID), new OperandValue(ObjectTypeFilter), new OperandValue(ObjectClassFilter), new OperandValue(ProductLineFilter), new OperandValue(UserID), new OperandValue(MiscRef), new OperandValue(Notes), new OperandValue(Remarks), new OperandValue(AssetNum), new OperandValue(ModelNum), new OperandValue(SerialNum), new OperandValue(StateRoute), new OperandValue(MileMarkerBegin), new OperandValue(MileMarkerEnd), new OperandValue(BuildDateStart), new OperandValue(BuildDateEnd), new OperandValue(InServiceDateStart), new OperandValue(InServiceDateEnd), new OperandValue(WntyDateStart), new OperandValue(WntyDateEnd), new OperandValue(LifeCycleDateStart), new OperandValue(LifeCycleDateEnd), new OperandValue(CostCodeID), new OperandValue(FundingSource), new OperandValue(WorkOrder), new OperandValue(WorkOp), new OperandValue(OrgCode), new OperandValue(FundingGroup), new OperandValue(EquipmentNumber), new OperandValue(ControlSection), new OperandValue(AttachmentsYNB), new OperandValue(ConditionCode), new OperandValue(ParentObjectID), new OperandValue(ComponentType), new OperandValue(OEEFocusYNB), new OperandValue(UOM), new OperandValue(Manufacturer), new OperandValue(Vendor), new OperandValue(MilePostDirection), new OperandValue(ShowRunUnits));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredMaintenanceObjectsListResult> Execfilter_GetFilteredMaintenanceObjectsListIntoObjects(Session session, string ObjectIDLike, string DescContains, string ActiveYNB, string ChargeAbleYNB, string AreaID, string RespPersonFilter, string StoreroomFilter, string LocationFilter, string TaskID, string ObjectTypeFilter, string ObjectClassFilter, string ProductLineFilter, int UserID, string MiscRef, string Notes, string Remarks, string AssetNum, string ModelNum, string SerialNum, string StateRoute, decimal MileMarkerBegin, decimal MileMarkerEnd, DateTime BuildDateStart, DateTime BuildDateEnd, DateTime InServiceDateStart, DateTime InServiceDateEnd, DateTime WntyDateStart, DateTime WntyDateEnd, DateTime LifeCycleDateStart, DateTime LifeCycleDateEnd, string CostCodeID, string FundingSource, string WorkOrder, string WorkOp, string OrgCode, string FundingGroup, string EquipmentNumber, string ControlSection, string AttachmentsYNB, string ConditionCode, string ParentObjectID, string ComponentType, string OEEFocusYNB, string UOM, string Manufacturer, string Vendor, string MilePostDirection, string ShowRunUnits)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredMaintenanceObjectsListResult>("filter_GetFilteredMaintenanceObjectsList", new OperandValue(ObjectIDLike), new OperandValue(DescContains), new OperandValue(ActiveYNB), new OperandValue(ChargeAbleYNB), new OperandValue(AreaID), new OperandValue(RespPersonFilter), new OperandValue(StoreroomFilter), new OperandValue(LocationFilter), new OperandValue(TaskID), new OperandValue(ObjectTypeFilter), new OperandValue(ObjectClassFilter), new OperandValue(ProductLineFilter), new OperandValue(UserID), new OperandValue(MiscRef), new OperandValue(Notes), new OperandValue(Remarks), new OperandValue(AssetNum), new OperandValue(ModelNum), new OperandValue(SerialNum), new OperandValue(StateRoute), new OperandValue(MileMarkerBegin), new OperandValue(MileMarkerEnd), new OperandValue(BuildDateStart), new OperandValue(BuildDateEnd), new OperandValue(InServiceDateStart), new OperandValue(InServiceDateEnd), new OperandValue(WntyDateStart), new OperandValue(WntyDateEnd), new OperandValue(LifeCycleDateStart), new OperandValue(LifeCycleDateEnd), new OperandValue(CostCodeID), new OperandValue(FundingSource), new OperandValue(WorkOrder), new OperandValue(WorkOp), new OperandValue(OrgCode), new OperandValue(FundingGroup), new OperandValue(EquipmentNumber), new OperandValue(ControlSection), new OperandValue(AttachmentsYNB), new OperandValue(ConditionCode), new OperandValue(ParentObjectID), new OperandValue(ComponentType), new OperandValue(OEEFocusYNB), new OperandValue(UOM), new OperandValue(Manufacturer), new OperandValue(Vendor), new OperandValue(MilePostDirection), new OperandValue(ShowRunUnits));
        }
        public static XPDataView Execfilter_GetFilteredMaintenanceObjectsListIntoDataView(Session session, string ObjectIDLike, string DescContains, string ActiveYNB, string ChargeAbleYNB, string AreaID, string RespPersonFilter, string StoreroomFilter, string LocationFilter, string TaskID, string ObjectTypeFilter, string ObjectClassFilter, string ProductLineFilter, int UserID, string MiscRef, string Notes, string Remarks, string AssetNum, string ModelNum, string SerialNum, string StateRoute, decimal MileMarkerBegin, decimal MileMarkerEnd, DateTime BuildDateStart, DateTime BuildDateEnd, DateTime InServiceDateStart, DateTime InServiceDateEnd, DateTime WntyDateStart, DateTime WntyDateEnd, DateTime LifeCycleDateStart, DateTime LifeCycleDateEnd, string CostCodeID, string FundingSource, string WorkOrder, string WorkOp, string OrgCode, string FundingGroup, string EquipmentNumber, string ControlSection, string AttachmentsYNB, string ConditionCode, string ParentObjectID, string ComponentType, string OEEFocusYNB, string UOM, string Manufacturer, string Vendor, string MilePostDirection, string ShowRunUnits)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredMaintenanceObjectsList", new OperandValue(ObjectIDLike), new OperandValue(DescContains), new OperandValue(ActiveYNB), new OperandValue(ChargeAbleYNB), new OperandValue(AreaID), new OperandValue(RespPersonFilter), new OperandValue(StoreroomFilter), new OperandValue(LocationFilter), new OperandValue(TaskID), new OperandValue(ObjectTypeFilter), new OperandValue(ObjectClassFilter), new OperandValue(ProductLineFilter), new OperandValue(UserID), new OperandValue(MiscRef), new OperandValue(Notes), new OperandValue(Remarks), new OperandValue(AssetNum), new OperandValue(ModelNum), new OperandValue(SerialNum), new OperandValue(StateRoute), new OperandValue(MileMarkerBegin), new OperandValue(MileMarkerEnd), new OperandValue(BuildDateStart), new OperandValue(BuildDateEnd), new OperandValue(InServiceDateStart), new OperandValue(InServiceDateEnd), new OperandValue(WntyDateStart), new OperandValue(WntyDateEnd), new OperandValue(LifeCycleDateStart), new OperandValue(LifeCycleDateEnd), new OperandValue(CostCodeID), new OperandValue(FundingSource), new OperandValue(WorkOrder), new OperandValue(WorkOp), new OperandValue(OrgCode), new OperandValue(FundingGroup), new OperandValue(EquipmentNumber), new OperandValue(ControlSection), new OperandValue(AttachmentsYNB), new OperandValue(ConditionCode), new OperandValue(ParentObjectID), new OperandValue(ComponentType), new OperandValue(OEEFocusYNB), new OperandValue(UOM), new OperandValue(Manufacturer), new OperandValue(Vendor), new OperandValue(MilePostDirection), new OperandValue(ShowRunUnits));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredMaintenanceObjectsListResult)), sprocData);
        }
        public static void Execfilter_GetFilteredMaintenanceObjectsListIntoDataView(XPDataView dataView, Session session, string ObjectIDLike, string DescContains, string ActiveYNB, string ChargeAbleYNB, string AreaID, string RespPersonFilter, string StoreroomFilter, string LocationFilter, string TaskID, string ObjectTypeFilter, string ObjectClassFilter, string ProductLineFilter, int UserID, string MiscRef, string Notes, string Remarks, string AssetNum, string ModelNum, string SerialNum, string StateRoute, decimal MileMarkerBegin, decimal MileMarkerEnd, DateTime BuildDateStart, DateTime BuildDateEnd, DateTime InServiceDateStart, DateTime InServiceDateEnd, DateTime WntyDateStart, DateTime WntyDateEnd, DateTime LifeCycleDateStart, DateTime LifeCycleDateEnd, string CostCodeID, string FundingSource, string WorkOrder, string WorkOp, string OrgCode, string FundingGroup, string EquipmentNumber, string ControlSection, string AttachmentsYNB, string ConditionCode, string ParentObjectID, string ComponentType, string OEEFocusYNB, string UOM, string Manufacturer, string Vendor, string MilePostDirection, string ShowRunUnits)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredMaintenanceObjectsList", new OperandValue(ObjectIDLike), new OperandValue(DescContains), new OperandValue(ActiveYNB), new OperandValue(ChargeAbleYNB), new OperandValue(AreaID), new OperandValue(RespPersonFilter), new OperandValue(StoreroomFilter), new OperandValue(LocationFilter), new OperandValue(TaskID), new OperandValue(ObjectTypeFilter), new OperandValue(ObjectClassFilter), new OperandValue(ProductLineFilter), new OperandValue(UserID), new OperandValue(MiscRef), new OperandValue(Notes), new OperandValue(Remarks), new OperandValue(AssetNum), new OperandValue(ModelNum), new OperandValue(SerialNum), new OperandValue(StateRoute), new OperandValue(MileMarkerBegin), new OperandValue(MileMarkerEnd), new OperandValue(BuildDateStart), new OperandValue(BuildDateEnd), new OperandValue(InServiceDateStart), new OperandValue(InServiceDateEnd), new OperandValue(WntyDateStart), new OperandValue(WntyDateEnd), new OperandValue(LifeCycleDateStart), new OperandValue(LifeCycleDateEnd), new OperandValue(CostCodeID), new OperandValue(FundingSource), new OperandValue(WorkOrder), new OperandValue(WorkOp), new OperandValue(OrgCode), new OperandValue(FundingGroup), new OperandValue(EquipmentNumber), new OperandValue(ControlSection), new OperandValue(AttachmentsYNB), new OperandValue(ConditionCode), new OperandValue(ParentObjectID), new OperandValue(ComponentType), new OperandValue(OEEFocusYNB), new OperandValue(UOM), new OperandValue(Manufacturer), new OperandValue(Vendor), new OperandValue(MilePostDirection), new OperandValue(ShowRunUnits));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredMaintenanceObjectsListResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredMaintenanceObjectsListOld(Session session, string ObjectIDLike, string DescContains, string ActiveYNB, string ChargeAbleYNB, string AreaID, string RespPersonFilter, string StoreroomFilter, string LocationFilter, string TaskID, string ObjectTypeFilter, string ObjectClassFilter, string ProductLineFilter, int UserID, string MiscRef, string Notes, string Remarks, string AssetNum, string ModelNum, string SerialNum, string StateRoute, decimal MileMarkerBegin, decimal MileMarkerEnd, DateTime BuildDateStart, DateTime BuildDateEnd, DateTime InServiceDateStart, DateTime InServiceDateEnd, DateTime WntyDateStart, DateTime WntyDateEnd, DateTime LifeCycleDateStart, DateTime LifeCycleDateEnd, string CostCodeID, string FundingSource, string WorkOrder, string WorkOp, string OrgCode, string FundingGroup, string EquipmentNumber, string ControlSection, string AttachmentsYNB, string ConditionCode, string ParentObjectID, string ComponentType, string OEEFocusYNB, string UOM, string Manufacturer, string Vendor, string MilePostDirection, string ShowRunUnits)
        {
            return session.ExecuteSproc("filter_GetFilteredMaintenanceObjectsListOld", new OperandValue(ObjectIDLike), new OperandValue(DescContains), new OperandValue(ActiveYNB), new OperandValue(ChargeAbleYNB), new OperandValue(AreaID), new OperandValue(RespPersonFilter), new OperandValue(StoreroomFilter), new OperandValue(LocationFilter), new OperandValue(TaskID), new OperandValue(ObjectTypeFilter), new OperandValue(ObjectClassFilter), new OperandValue(ProductLineFilter), new OperandValue(UserID), new OperandValue(MiscRef), new OperandValue(Notes), new OperandValue(Remarks), new OperandValue(AssetNum), new OperandValue(ModelNum), new OperandValue(SerialNum), new OperandValue(StateRoute), new OperandValue(MileMarkerBegin), new OperandValue(MileMarkerEnd), new OperandValue(BuildDateStart), new OperandValue(BuildDateEnd), new OperandValue(InServiceDateStart), new OperandValue(InServiceDateEnd), new OperandValue(WntyDateStart), new OperandValue(WntyDateEnd), new OperandValue(LifeCycleDateStart), new OperandValue(LifeCycleDateEnd), new OperandValue(CostCodeID), new OperandValue(FundingSource), new OperandValue(WorkOrder), new OperandValue(WorkOp), new OperandValue(OrgCode), new OperandValue(FundingGroup), new OperandValue(EquipmentNumber), new OperandValue(ControlSection), new OperandValue(AttachmentsYNB), new OperandValue(ConditionCode), new OperandValue(ParentObjectID), new OperandValue(ComponentType), new OperandValue(OEEFocusYNB), new OperandValue(UOM), new OperandValue(Manufacturer), new OperandValue(Vendor), new OperandValue(MilePostDirection), new OperandValue(ShowRunUnits));
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredManufacturersList(Session session, string ManuID, string Descr, string Address1, string Address2, string City, string State, string Zip, string Contact, string Phone, string Fax, string Notes, string Website, int MasterpartID, string Active)
        {
            return session.ExecuteSproc("filter_GetFilteredManufacturersList", new OperandValue(ManuID), new OperandValue(Descr), new OperandValue(Address1), new OperandValue(Address2), new OperandValue(City), new OperandValue(State), new OperandValue(Zip), new OperandValue(Contact), new OperandValue(Phone), new OperandValue(Fax), new OperandValue(Notes), new OperandValue(Website), new OperandValue(MasterpartID), new OperandValue(Active));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredManufacturersListResult> Execfilter_GetFilteredManufacturersListIntoObjects(Session session, string ManuID, string Descr, string Address1, string Address2, string City, string State, string Zip, string Contact, string Phone, string Fax, string Notes, string Website, int MasterpartID, string Active)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredManufacturersListResult>("filter_GetFilteredManufacturersList", new OperandValue(ManuID), new OperandValue(Descr), new OperandValue(Address1), new OperandValue(Address2), new OperandValue(City), new OperandValue(State), new OperandValue(Zip), new OperandValue(Contact), new OperandValue(Phone), new OperandValue(Fax), new OperandValue(Notes), new OperandValue(Website), new OperandValue(MasterpartID), new OperandValue(Active));
        }
        public static XPDataView Execfilter_GetFilteredManufacturersListIntoDataView(Session session, string ManuID, string Descr, string Address1, string Address2, string City, string State, string Zip, string Contact, string Phone, string Fax, string Notes, string Website, int MasterpartID, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredManufacturersList", new OperandValue(ManuID), new OperandValue(Descr), new OperandValue(Address1), new OperandValue(Address2), new OperandValue(City), new OperandValue(State), new OperandValue(Zip), new OperandValue(Contact), new OperandValue(Phone), new OperandValue(Fax), new OperandValue(Notes), new OperandValue(Website), new OperandValue(MasterpartID), new OperandValue(Active));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredManufacturersListResult)), sprocData);
        }
        public static void Execfilter_GetFilteredManufacturersListIntoDataView(XPDataView dataView, Session session, string ManuID, string Descr, string Address1, string Address2, string City, string State, string Zip, string Contact, string Phone, string Fax, string Notes, string Website, int MasterpartID, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredManufacturersList", new OperandValue(ManuID), new OperandValue(Descr), new OperandValue(Address1), new OperandValue(Address2), new OperandValue(City), new OperandValue(State), new OperandValue(Zip), new OperandValue(Contact), new OperandValue(Phone), new OperandValue(Fax), new OperandValue(Notes), new OperandValue(Website), new OperandValue(MasterpartID), new OperandValue(Active));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredManufacturersListResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredMasterPartsList(Session session, string MasterpartIDLike, string DescLike, string AssignedToBuyer, string PartTypeID, string VendorID, string MfgID, string SpecialHandlingYNB, string IsToolYNB, string BuyerCommentContains, decimal ListCostStart, decimal ListCostEnd, string VendorPartID, string MFGPartID, string ActiveSetting, int ObjectIDForParts, string Notes, int MRPRuleType, decimal AvgCostStart, decimal AvgCostEnd, string ObjectCode, int UserID, string HasAttachments)
        {
            return session.ExecuteSproc("filter_GetFilteredMasterPartsList", new OperandValue(MasterpartIDLike), new OperandValue(DescLike), new OperandValue(AssignedToBuyer), new OperandValue(PartTypeID), new OperandValue(VendorID), new OperandValue(MfgID), new OperandValue(SpecialHandlingYNB), new OperandValue(IsToolYNB), new OperandValue(BuyerCommentContains), new OperandValue(ListCostStart), new OperandValue(ListCostEnd), new OperandValue(VendorPartID), new OperandValue(MFGPartID), new OperandValue(ActiveSetting), new OperandValue(ObjectIDForParts), new OperandValue(Notes), new OperandValue(MRPRuleType), new OperandValue(AvgCostStart), new OperandValue(AvgCostEnd), new OperandValue(ObjectCode), new OperandValue(UserID), new OperandValue(HasAttachments));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredMasterPartsListResult> Execfilter_GetFilteredMasterPartsListIntoObjects(Session session, string MasterpartIDLike, string DescLike, string AssignedToBuyer, string PartTypeID, string VendorID, string MfgID, string SpecialHandlingYNB, string IsToolYNB, string BuyerCommentContains, decimal ListCostStart, decimal ListCostEnd, string VendorPartID, string MFGPartID, string ActiveSetting, int ObjectIDForParts, string Notes, int MRPRuleType, decimal AvgCostStart, decimal AvgCostEnd, string ObjectCode, int UserID, string HasAttachments)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredMasterPartsListResult>("filter_GetFilteredMasterPartsList", new OperandValue(MasterpartIDLike), new OperandValue(DescLike), new OperandValue(AssignedToBuyer), new OperandValue(PartTypeID), new OperandValue(VendorID), new OperandValue(MfgID), new OperandValue(SpecialHandlingYNB), new OperandValue(IsToolYNB), new OperandValue(BuyerCommentContains), new OperandValue(ListCostStart), new OperandValue(ListCostEnd), new OperandValue(VendorPartID), new OperandValue(MFGPartID), new OperandValue(ActiveSetting), new OperandValue(ObjectIDForParts), new OperandValue(Notes), new OperandValue(MRPRuleType), new OperandValue(AvgCostStart), new OperandValue(AvgCostEnd), new OperandValue(ObjectCode), new OperandValue(UserID), new OperandValue(HasAttachments));
        }
        public static XPDataView Execfilter_GetFilteredMasterPartsListIntoDataView(Session session, string MasterpartIDLike, string DescLike, string AssignedToBuyer, string PartTypeID, string VendorID, string MfgID, string SpecialHandlingYNB, string IsToolYNB, string BuyerCommentContains, decimal ListCostStart, decimal ListCostEnd, string VendorPartID, string MFGPartID, string ActiveSetting, int ObjectIDForParts, string Notes, int MRPRuleType, decimal AvgCostStart, decimal AvgCostEnd, string ObjectCode, int UserID, string HasAttachments)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredMasterPartsList", new OperandValue(MasterpartIDLike), new OperandValue(DescLike), new OperandValue(AssignedToBuyer), new OperandValue(PartTypeID), new OperandValue(VendorID), new OperandValue(MfgID), new OperandValue(SpecialHandlingYNB), new OperandValue(IsToolYNB), new OperandValue(BuyerCommentContains), new OperandValue(ListCostStart), new OperandValue(ListCostEnd), new OperandValue(VendorPartID), new OperandValue(MFGPartID), new OperandValue(ActiveSetting), new OperandValue(ObjectIDForParts), new OperandValue(Notes), new OperandValue(MRPRuleType), new OperandValue(AvgCostStart), new OperandValue(AvgCostEnd), new OperandValue(ObjectCode), new OperandValue(UserID), new OperandValue(HasAttachments));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredMasterPartsListResult)), sprocData);
        }
        public static void Execfilter_GetFilteredMasterPartsListIntoDataView(XPDataView dataView, Session session, string MasterpartIDLike, string DescLike, string AssignedToBuyer, string PartTypeID, string VendorID, string MfgID, string SpecialHandlingYNB, string IsToolYNB, string BuyerCommentContains, decimal ListCostStart, decimal ListCostEnd, string VendorPartID, string MFGPartID, string ActiveSetting, int ObjectIDForParts, string Notes, int MRPRuleType, decimal AvgCostStart, decimal AvgCostEnd, string ObjectCode, int UserID, string HasAttachments)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredMasterPartsList", new OperandValue(MasterpartIDLike), new OperandValue(DescLike), new OperandValue(AssignedToBuyer), new OperandValue(PartTypeID), new OperandValue(VendorID), new OperandValue(MfgID), new OperandValue(SpecialHandlingYNB), new OperandValue(IsToolYNB), new OperandValue(BuyerCommentContains), new OperandValue(ListCostStart), new OperandValue(ListCostEnd), new OperandValue(VendorPartID), new OperandValue(MFGPartID), new OperandValue(ActiveSetting), new OperandValue(ObjectIDForParts), new OperandValue(Notes), new OperandValue(MRPRuleType), new OperandValue(AvgCostStart), new OperandValue(AvgCostEnd), new OperandValue(ObjectCode), new OperandValue(UserID), new OperandValue(HasAttachments));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredMasterPartsListResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredMilePostDirection(Session session, string IDContains, string DescrContains, string Active)
        {
            return session.ExecuteSproc("filter_GetFilteredMilePostDirection", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredMilePostDirectionResult> Execfilter_GetFilteredMilePostDirectionIntoObjects(Session session, string IDContains, string DescrContains, string Active)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredMilePostDirectionResult>("filter_GetFilteredMilePostDirection", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
        }
        public static XPDataView Execfilter_GetFilteredMilePostDirectionIntoDataView(Session session, string IDContains, string DescrContains, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredMilePostDirection", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredMilePostDirectionResult)), sprocData);
        }
        public static void Execfilter_GetFilteredMilePostDirectionIntoDataView(XPDataView dataView, Session session, string IDContains, string DescrContains, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredMilePostDirection", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredMilePostDirectionResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredMPETUserApprovalList(Session session, string IDContains, string FirstStartsWith, string LastStartsWith, string ForArea, string ForPositionCode, string ForPersonClass, string LocationID, string ActiveSetting, string LaborClassID, string GroupID, int UserID, string Notes, string BuyerStatus)
        {
            return session.ExecuteSproc("filter_GetFilteredMPETUserApprovalList", new OperandValue(IDContains), new OperandValue(FirstStartsWith), new OperandValue(LastStartsWith), new OperandValue(ForArea), new OperandValue(ForPositionCode), new OperandValue(ForPersonClass), new OperandValue(LocationID), new OperandValue(ActiveSetting), new OperandValue(LaborClassID), new OperandValue(GroupID), new OperandValue(UserID), new OperandValue(Notes), new OperandValue(BuyerStatus));
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredMPETUserList(Session session, string IDContains, string FirstStartsWith, string LastStartsWith, string ForArea, string ForPositionCode, string ForPersonClass, string LocationID, string ActiveSetting, string LaborClassID, string GroupID, int UserID, string Notes, string BuyerStatus, int ApprovalID)
        {
            return session.ExecuteSproc("filter_GetFilteredMPETUserList", new OperandValue(IDContains), new OperandValue(FirstStartsWith), new OperandValue(LastStartsWith), new OperandValue(ForArea), new OperandValue(ForPositionCode), new OperandValue(ForPersonClass), new OperandValue(LocationID), new OperandValue(ActiveSetting), new OperandValue(LaborClassID), new OperandValue(GroupID), new OperandValue(UserID), new OperandValue(Notes), new OperandValue(BuyerStatus), new OperandValue(ApprovalID));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredMPETUserListResult> Execfilter_GetFilteredMPETUserListIntoObjects(Session session, string IDContains, string FirstStartsWith, string LastStartsWith, string ForArea, string ForPositionCode, string ForPersonClass, string LocationID, string ActiveSetting, string LaborClassID, string GroupID, int UserID, string Notes, string BuyerStatus, int ApprovalID)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredMPETUserListResult>("filter_GetFilteredMPETUserList", new OperandValue(IDContains), new OperandValue(FirstStartsWith), new OperandValue(LastStartsWith), new OperandValue(ForArea), new OperandValue(ForPositionCode), new OperandValue(ForPersonClass), new OperandValue(LocationID), new OperandValue(ActiveSetting), new OperandValue(LaborClassID), new OperandValue(GroupID), new OperandValue(UserID), new OperandValue(Notes), new OperandValue(BuyerStatus), new OperandValue(ApprovalID));
        }
        public static XPDataView Execfilter_GetFilteredMPETUserListIntoDataView(Session session, string IDContains, string FirstStartsWith, string LastStartsWith, string ForArea, string ForPositionCode, string ForPersonClass, string LocationID, string ActiveSetting, string LaborClassID, string GroupID, int UserID, string Notes, string BuyerStatus, int ApprovalID)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredMPETUserList", new OperandValue(IDContains), new OperandValue(FirstStartsWith), new OperandValue(LastStartsWith), new OperandValue(ForArea), new OperandValue(ForPositionCode), new OperandValue(ForPersonClass), new OperandValue(LocationID), new OperandValue(ActiveSetting), new OperandValue(LaborClassID), new OperandValue(GroupID), new OperandValue(UserID), new OperandValue(Notes), new OperandValue(BuyerStatus), new OperandValue(ApprovalID));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredMPETUserListResult)), sprocData);
        }
        public static void Execfilter_GetFilteredMPETUserListIntoDataView(XPDataView dataView, Session session, string IDContains, string FirstStartsWith, string LastStartsWith, string ForArea, string ForPositionCode, string ForPersonClass, string LocationID, string ActiveSetting, string LaborClassID, string GroupID, int UserID, string Notes, string BuyerStatus, int ApprovalID)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredMPETUserList", new OperandValue(IDContains), new OperandValue(FirstStartsWith), new OperandValue(LastStartsWith), new OperandValue(ForArea), new OperandValue(ForPositionCode), new OperandValue(ForPersonClass), new OperandValue(LocationID), new OperandValue(ActiveSetting), new OperandValue(LaborClassID), new OperandValue(GroupID), new OperandValue(UserID), new OperandValue(Notes), new OperandValue(BuyerStatus), new OperandValue(ApprovalID));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredMPETUserListResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredMPETUserListForApprovals(Session session, string IDContains, string FirstStartsWith, string LastStartsWith, string ForArea, string ForPositionCode, string ForPersonClass, string LocationID, string ActiveSetting, string LaborClassID, string GroupID, int UserID, string Notes, string BuyerStatus)
        {
            return session.ExecuteSproc("filter_GetFilteredMPETUserListForApprovals", new OperandValue(IDContains), new OperandValue(FirstStartsWith), new OperandValue(LastStartsWith), new OperandValue(ForArea), new OperandValue(ForPositionCode), new OperandValue(ForPersonClass), new OperandValue(LocationID), new OperandValue(ActiveSetting), new OperandValue(LaborClassID), new OperandValue(GroupID), new OperandValue(UserID), new OperandValue(Notes), new OperandValue(BuyerStatus));
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredMPETUserListOld(Session session, string IDContains, string FirstStartsWith, string LastStartsWith, string ForArea, string ForPositionCode, string ForPersonClass, string LocationID, string ActiveSetting, string LaborClassID, string GroupID, int UserID, string Notes, string BuyerStatus, int ApprovalID)
        {
            return session.ExecuteSproc("filter_GetFilteredMPETUserListOld", new OperandValue(IDContains), new OperandValue(FirstStartsWith), new OperandValue(LastStartsWith), new OperandValue(ForArea), new OperandValue(ForPositionCode), new OperandValue(ForPersonClass), new OperandValue(LocationID), new OperandValue(ActiveSetting), new OperandValue(LaborClassID), new OperandValue(GroupID), new OperandValue(UserID), new OperandValue(Notes), new OperandValue(BuyerStatus), new OperandValue(ApprovalID));
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredObjectClassList(Session session, string ObjectID, string Descr, string Active)
        {
            return session.ExecuteSproc("filter_GetFilteredObjectClassList", new OperandValue(ObjectID), new OperandValue(Descr), new OperandValue(Active));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredObjectClassListResult> Execfilter_GetFilteredObjectClassListIntoObjects(Session session, string ObjectID, string Descr, string Active)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredObjectClassListResult>("filter_GetFilteredObjectClassList", new OperandValue(ObjectID), new OperandValue(Descr), new OperandValue(Active));
        }
        public static XPDataView Execfilter_GetFilteredObjectClassListIntoDataView(Session session, string ObjectID, string Descr, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredObjectClassList", new OperandValue(ObjectID), new OperandValue(Descr), new OperandValue(Active));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredObjectClassListResult)), sprocData);
        }
        public static void Execfilter_GetFilteredObjectClassListIntoDataView(XPDataView dataView, Session session, string ObjectID, string Descr, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredObjectClassList", new OperandValue(ObjectID), new OperandValue(Descr), new OperandValue(Active));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredObjectClassListResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredObjectCodes(Session session, string IDContains, string DescrContains, string Active)
        {
            return session.ExecuteSproc("filter_GetFilteredObjectCodes", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredObjectCodesResult> Execfilter_GetFilteredObjectCodesIntoObjects(Session session, string IDContains, string DescrContains, string Active)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredObjectCodesResult>("filter_GetFilteredObjectCodes", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
        }
        public static XPDataView Execfilter_GetFilteredObjectCodesIntoDataView(Session session, string IDContains, string DescrContains, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredObjectCodes", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredObjectCodesResult)), sprocData);
        }
        public static void Execfilter_GetFilteredObjectCodesIntoDataView(XPDataView dataView, Session session, string IDContains, string DescrContains, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredObjectCodes", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredObjectCodesResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredObjectTasksList(Session session, string AreaIDFilter, string TaskIDFilter, string TaskDescFilter, string ObjectIDFilter, string ObjectDescFilter, string IsDisabled, string IsSeasonal, string PrimaryLaborID, string GroupID, string SupervisorID, string WorkTypeID, string ShiftID, int UserID, string ReasonID, string PriorityID, string Notes, string MiscRef)
        {
            return session.ExecuteSproc("filter_GetFilteredObjectTasksList", new OperandValue(AreaIDFilter), new OperandValue(TaskIDFilter), new OperandValue(TaskDescFilter), new OperandValue(ObjectIDFilter), new OperandValue(ObjectDescFilter), new OperandValue(IsDisabled), new OperandValue(IsSeasonal), new OperandValue(PrimaryLaborID), new OperandValue(GroupID), new OperandValue(SupervisorID), new OperandValue(WorkTypeID), new OperandValue(ShiftID), new OperandValue(UserID), new OperandValue(ReasonID), new OperandValue(PriorityID), new OperandValue(Notes), new OperandValue(MiscRef));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredObjectTasksListResult> Execfilter_GetFilteredObjectTasksListIntoObjects(Session session, string AreaIDFilter, string TaskIDFilter, string TaskDescFilter, string ObjectIDFilter, string ObjectDescFilter, string IsDisabled, string IsSeasonal, string PrimaryLaborID, string GroupID, string SupervisorID, string WorkTypeID, string ShiftID, int UserID, string ReasonID, string PriorityID, string Notes, string MiscRef)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredObjectTasksListResult>("filter_GetFilteredObjectTasksList", new OperandValue(AreaIDFilter), new OperandValue(TaskIDFilter), new OperandValue(TaskDescFilter), new OperandValue(ObjectIDFilter), new OperandValue(ObjectDescFilter), new OperandValue(IsDisabled), new OperandValue(IsSeasonal), new OperandValue(PrimaryLaborID), new OperandValue(GroupID), new OperandValue(SupervisorID), new OperandValue(WorkTypeID), new OperandValue(ShiftID), new OperandValue(UserID), new OperandValue(ReasonID), new OperandValue(PriorityID), new OperandValue(Notes), new OperandValue(MiscRef));
        }
        public static XPDataView Execfilter_GetFilteredObjectTasksListIntoDataView(Session session, string AreaIDFilter, string TaskIDFilter, string TaskDescFilter, string ObjectIDFilter, string ObjectDescFilter, string IsDisabled, string IsSeasonal, string PrimaryLaborID, string GroupID, string SupervisorID, string WorkTypeID, string ShiftID, int UserID, string ReasonID, string PriorityID, string Notes, string MiscRef)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredObjectTasksList", new OperandValue(AreaIDFilter), new OperandValue(TaskIDFilter), new OperandValue(TaskDescFilter), new OperandValue(ObjectIDFilter), new OperandValue(ObjectDescFilter), new OperandValue(IsDisabled), new OperandValue(IsSeasonal), new OperandValue(PrimaryLaborID), new OperandValue(GroupID), new OperandValue(SupervisorID), new OperandValue(WorkTypeID), new OperandValue(ShiftID), new OperandValue(UserID), new OperandValue(ReasonID), new OperandValue(PriorityID), new OperandValue(Notes), new OperandValue(MiscRef));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredObjectTasksListResult)), sprocData);
        }
        public static void Execfilter_GetFilteredObjectTasksListIntoDataView(XPDataView dataView, Session session, string AreaIDFilter, string TaskIDFilter, string TaskDescFilter, string ObjectIDFilter, string ObjectDescFilter, string IsDisabled, string IsSeasonal, string PrimaryLaborID, string GroupID, string SupervisorID, string WorkTypeID, string ShiftID, int UserID, string ReasonID, string PriorityID, string Notes, string MiscRef)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredObjectTasksList", new OperandValue(AreaIDFilter), new OperandValue(TaskIDFilter), new OperandValue(TaskDescFilter), new OperandValue(ObjectIDFilter), new OperandValue(ObjectDescFilter), new OperandValue(IsDisabled), new OperandValue(IsSeasonal), new OperandValue(PrimaryLaborID), new OperandValue(GroupID), new OperandValue(SupervisorID), new OperandValue(WorkTypeID), new OperandValue(ShiftID), new OperandValue(UserID), new OperandValue(ReasonID), new OperandValue(PriorityID), new OperandValue(Notes), new OperandValue(MiscRef));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredObjectTasksListResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredObjectTasksListOld(Session session, string AreaIDFilter, string TaskIDFilter, string TaskDescFilter, string ObjectIDFilter, string ObjectDescFilter, string IsDisabled, string IsSeasonal, string PrimaryLaborID, string GroupID, string SupervisorID, string WorkTypeID, string ShiftID, int UserID, string ReasonID, string PriorityID, string Notes, string MiscRef)
        {
            return session.ExecuteSproc("filter_GetFilteredObjectTasksListOld", new OperandValue(AreaIDFilter), new OperandValue(TaskIDFilter), new OperandValue(TaskDescFilter), new OperandValue(ObjectIDFilter), new OperandValue(ObjectDescFilter), new OperandValue(IsDisabled), new OperandValue(IsSeasonal), new OperandValue(PrimaryLaborID), new OperandValue(GroupID), new OperandValue(SupervisorID), new OperandValue(WorkTypeID), new OperandValue(ShiftID), new OperandValue(UserID), new OperandValue(ReasonID), new OperandValue(PriorityID), new OperandValue(Notes), new OperandValue(MiscRef));
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredObjectTypeList(Session session, string TypeID, string Descr, string SubAssbly, string Active)
        {
            return session.ExecuteSproc("filter_GetFilteredObjectTypeList", new OperandValue(TypeID), new OperandValue(Descr), new OperandValue(SubAssbly), new OperandValue(Active));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredObjectTypeListResult> Execfilter_GetFilteredObjectTypeListIntoObjects(Session session, string TypeID, string Descr, string SubAssbly, string Active)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredObjectTypeListResult>("filter_GetFilteredObjectTypeList", new OperandValue(TypeID), new OperandValue(Descr), new OperandValue(SubAssbly), new OperandValue(Active));
        }
        public static XPDataView Execfilter_GetFilteredObjectTypeListIntoDataView(Session session, string TypeID, string Descr, string SubAssbly, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredObjectTypeList", new OperandValue(TypeID), new OperandValue(Descr), new OperandValue(SubAssbly), new OperandValue(Active));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredObjectTypeListResult)), sprocData);
        }
        public static void Execfilter_GetFilteredObjectTypeListIntoDataView(XPDataView dataView, Session session, string TypeID, string Descr, string SubAssbly, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredObjectTypeList", new OperandValue(TypeID), new OperandValue(Descr), new OperandValue(SubAssbly), new OperandValue(Active));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredObjectTypeListResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredOrganizationCodes(Session session, string IDContains, string DescrContains, string Active)
        {
            return session.ExecuteSproc("filter_GetFilteredOrganizationCodes", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredOrganizationCodesResult> Execfilter_GetFilteredOrganizationCodesIntoObjects(Session session, string IDContains, string DescrContains, string Active)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredOrganizationCodesResult>("filter_GetFilteredOrganizationCodes", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
        }
        public static XPDataView Execfilter_GetFilteredOrganizationCodesIntoDataView(Session session, string IDContains, string DescrContains, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredOrganizationCodes", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredOrganizationCodesResult)), sprocData);
        }
        public static void Execfilter_GetFilteredOrganizationCodesIntoDataView(XPDataView dataView, Session session, string IDContains, string DescrContains, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredOrganizationCodes", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredOrganizationCodesResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredOutcomeCodeList(Session session, string OutcomeCode, string Descr, string SubtractFromIssued, string CountAsCompleted, string WorkNotDone, string PostNotesRequired, string Active)
        {
            return session.ExecuteSproc("filter_GetFilteredOutcomeCodeList", new OperandValue(OutcomeCode), new OperandValue(Descr), new OperandValue(SubtractFromIssued), new OperandValue(CountAsCompleted), new OperandValue(WorkNotDone), new OperandValue(PostNotesRequired), new OperandValue(Active));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredOutcomeCodeListResult> Execfilter_GetFilteredOutcomeCodeListIntoObjects(Session session, string OutcomeCode, string Descr, string SubtractFromIssued, string CountAsCompleted, string WorkNotDone, string PostNotesRequired, string Active)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredOutcomeCodeListResult>("filter_GetFilteredOutcomeCodeList", new OperandValue(OutcomeCode), new OperandValue(Descr), new OperandValue(SubtractFromIssued), new OperandValue(CountAsCompleted), new OperandValue(WorkNotDone), new OperandValue(PostNotesRequired), new OperandValue(Active));
        }
        public static XPDataView Execfilter_GetFilteredOutcomeCodeListIntoDataView(Session session, string OutcomeCode, string Descr, string SubtractFromIssued, string CountAsCompleted, string WorkNotDone, string PostNotesRequired, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredOutcomeCodeList", new OperandValue(OutcomeCode), new OperandValue(Descr), new OperandValue(SubtractFromIssued), new OperandValue(CountAsCompleted), new OperandValue(WorkNotDone), new OperandValue(PostNotesRequired), new OperandValue(Active));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredOutcomeCodeListResult)), sprocData);
        }
        public static void Execfilter_GetFilteredOutcomeCodeListIntoDataView(XPDataView dataView, Session session, string OutcomeCode, string Descr, string SubtractFromIssued, string CountAsCompleted, string WorkNotDone, string PostNotesRequired, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredOutcomeCodeList", new OperandValue(OutcomeCode), new OperandValue(Descr), new OperandValue(SubtractFromIssued), new OperandValue(CountAsCompleted), new OperandValue(WorkNotDone), new OperandValue(PostNotesRequired), new OperandValue(Active));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredOutcomeCodeListResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredOverheadRateList(Session session, string RateID, string Descr, decimal RateBegin, decimal RateEnd, string Active)
        {
            return session.ExecuteSproc("filter_GetFilteredOverheadRateList", new OperandValue(RateID), new OperandValue(Descr), new OperandValue(RateBegin), new OperandValue(RateEnd), new OperandValue(Active));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredOverheadRateListResult> Execfilter_GetFilteredOverheadRateListIntoObjects(Session session, string RateID, string Descr, decimal RateBegin, decimal RateEnd, string Active)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredOverheadRateListResult>("filter_GetFilteredOverheadRateList", new OperandValue(RateID), new OperandValue(Descr), new OperandValue(RateBegin), new OperandValue(RateEnd), new OperandValue(Active));
        }
        public static XPDataView Execfilter_GetFilteredOverheadRateListIntoDataView(Session session, string RateID, string Descr, decimal RateBegin, decimal RateEnd, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredOverheadRateList", new OperandValue(RateID), new OperandValue(Descr), new OperandValue(RateBegin), new OperandValue(RateEnd), new OperandValue(Active));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredOverheadRateListResult)), sprocData);
        }
        public static void Execfilter_GetFilteredOverheadRateListIntoDataView(XPDataView dataView, Session session, string RateID, string Descr, decimal RateBegin, decimal RateEnd, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredOverheadRateList", new OperandValue(RateID), new OperandValue(Descr), new OperandValue(RateBegin), new OperandValue(RateEnd), new OperandValue(Active));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredOverheadRateListResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredPartTransactionsList(Session session, string CanceledYNB, string TransNumber, string TransactionType, string TransactionInReason, string TransactionOutReason, string TransNotes, string POID, string PurchaseAuthority, string ShipTo, string PONotes, string SWLID, string CostCodeID, string CostCodeDesc, string SupplCode, string AreaID, string JobID, string SWLNotes, string StoresIssueID, string OrigStoresIssueID, string Instructions, string PartID, string PartDesc, string PartType, string MiscRef, string Storeroom, string Vendor, string VendorDesc, string VendorPart, string MFGID, string MFGDesc, string MFGPart, string SWLOriginator, string AssignedBuyer, string SWLLaborClass, string SWLGroup, string POCreator, string SIRequestor, string SIApprover, string TransactionBy, string TransactionFrom, DateTime TransDateBegin, DateTime TransDateEnd, DateTime SWLDateOpenedBegin, DateTime SWLDateOpenedEnd, DateTime SWLDateRequiredBegin, DateTime SWLDateRequiredEnd, DateTime SWLStatusDateBegin, DateTime SWLStatusDateEnd, DateTime SWLModifiedDateBegin, DateTime SWLModifiedDateEnd, DateTime SWLApprovedDateBegin, DateTime SWLApprovedDateEnd, DateTime SWLClosedDateBegin, DateTime SWLClosedDateEnd, DateTime POCreatedDateBegin, DateTime POCreatedDateEnd, DateTime POStatusDateBegin, DateTime POStatusDateEnd, DateTime POModifiedDateBegin, DateTime POModifiedDateEnd, DateTime POApprovedDateBegin, DateTime POApprovedDateEnd, DateTime POClosedDateBegin, DateTime POClosedDateEnd, DateTime SIRequestedDateBegin, DateTime SIRequestedDateEnd, DateTime SINeededDateBegin, DateTime SINeededDateEnd, DateTime SIStatusDateBegin, DateTime SIStatusDateEnd, DateTime SIApprovedDateBegin, DateTime SIApprovedDateEnd, int StoreroomID)
        {
            return session.ExecuteSproc("filter_GetFilteredPartTransactionsList", new OperandValue(CanceledYNB), new OperandValue(TransNumber), new OperandValue(TransactionType), new OperandValue(TransactionInReason), new OperandValue(TransactionOutReason), new OperandValue(TransNotes), new OperandValue(POID), new OperandValue(PurchaseAuthority), new OperandValue(ShipTo), new OperandValue(PONotes), new OperandValue(SWLID), new OperandValue(CostCodeID), new OperandValue(CostCodeDesc), new OperandValue(SupplCode), new OperandValue(AreaID), new OperandValue(JobID), new OperandValue(SWLNotes), new OperandValue(StoresIssueID), new OperandValue(OrigStoresIssueID), new OperandValue(Instructions), new OperandValue(PartID), new OperandValue(PartDesc), new OperandValue(PartType), new OperandValue(MiscRef), new OperandValue(Storeroom), new OperandValue(Vendor), new OperandValue(VendorDesc), new OperandValue(VendorPart), new OperandValue(MFGID), new OperandValue(MFGDesc), new OperandValue(MFGPart), new OperandValue(SWLOriginator), new OperandValue(AssignedBuyer), new OperandValue(SWLLaborClass), new OperandValue(SWLGroup), new OperandValue(POCreator), new OperandValue(SIRequestor), new OperandValue(SIApprover), new OperandValue(TransactionBy), new OperandValue(TransactionFrom), new OperandValue(TransDateBegin), new OperandValue(TransDateEnd), new OperandValue(SWLDateOpenedBegin), new OperandValue(SWLDateOpenedEnd), new OperandValue(SWLDateRequiredBegin), new OperandValue(SWLDateRequiredEnd), new OperandValue(SWLStatusDateBegin), new OperandValue(SWLStatusDateEnd), new OperandValue(SWLModifiedDateBegin), new OperandValue(SWLModifiedDateEnd), new OperandValue(SWLApprovedDateBegin), new OperandValue(SWLApprovedDateEnd), new OperandValue(SWLClosedDateBegin), new OperandValue(SWLClosedDateEnd), new OperandValue(POCreatedDateBegin), new OperandValue(POCreatedDateEnd), new OperandValue(POStatusDateBegin), new OperandValue(POStatusDateEnd), new OperandValue(POModifiedDateBegin), new OperandValue(POModifiedDateEnd), new OperandValue(POApprovedDateBegin), new OperandValue(POApprovedDateEnd), new OperandValue(POClosedDateBegin), new OperandValue(POClosedDateEnd), new OperandValue(SIRequestedDateBegin), new OperandValue(SIRequestedDateEnd), new OperandValue(SINeededDateBegin), new OperandValue(SINeededDateEnd), new OperandValue(SIStatusDateBegin), new OperandValue(SIStatusDateEnd), new OperandValue(SIApprovedDateBegin), new OperandValue(SIApprovedDateEnd), new OperandValue(StoreroomID));
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredPartTypeList(Session session, string ID, string Descr, string Tool, string Active)
        {
            return session.ExecuteSproc("filter_GetFilteredPartTypeList", new OperandValue(ID), new OperandValue(Descr), new OperandValue(Tool), new OperandValue(Active));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredPartTypeListResult> Execfilter_GetFilteredPartTypeListIntoObjects(Session session, string ID, string Descr, string Tool, string Active)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredPartTypeListResult>("filter_GetFilteredPartTypeList", new OperandValue(ID), new OperandValue(Descr), new OperandValue(Tool), new OperandValue(Active));
        }
        public static XPDataView Execfilter_GetFilteredPartTypeListIntoDataView(Session session, string ID, string Descr, string Tool, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredPartTypeList", new OperandValue(ID), new OperandValue(Descr), new OperandValue(Tool), new OperandValue(Active));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredPartTypeListResult)), sprocData);
        }
        public static void Execfilter_GetFilteredPartTypeListIntoDataView(XPDataView dataView, Session session, string ID, string Descr, string Tool, string Active)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredPartTypeList", new OperandValue(ID), new OperandValue(Descr), new OperandValue(Tool), new OperandValue(Active));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredPartTypeListResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredPaycodeList(Session session, string PaycodeID, string Descr, string ReasonCodeYNB, string AdditiveHoursYNB, string Active)
        {
            return session.ExecuteSproc("filter_GetFilteredPaycodeList", new OperandValue(PaycodeID), new OperandValue(Descr), new OperandValue(ReasonCodeYNB), new OperandValue(AdditiveHoursYNB), new OperandValue(Active));
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredPayItemLinkList(Session session, int ProjectID)
        {
            return session.ExecuteSproc("filter_GetFilteredPayItemLinkList", new OperandValue(ProjectID));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredPayItemLinkListResult> Execfilter_GetFilteredPayItemLinkListIntoObjects(Session session, int ProjectID)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredPayItemLinkListResult>("filter_GetFilteredPayItemLinkList", new OperandValue(ProjectID));
        }
        public static XPDataView Execfilter_GetFilteredPayItemLinkListIntoDataView(Session session, int ProjectID)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredPayItemLinkList", new OperandValue(ProjectID));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredPayItemLinkListResult)), sprocData);
        }
        public static void Execfilter_GetFilteredPayItemLinkListIntoDataView(XPDataView dataView, Session session, int ProjectID)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredPayItemLinkList", new OperandValue(ProjectID));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredPayItemLinkListResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredPayItemList(Session session, string PayItemID, string PayItemDesc, string UOMID, string ActiveYNB, int ProjectLock)
        {
            return session.ExecuteSproc("filter_GetFilteredPayItemList", new OperandValue(PayItemID), new OperandValue(PayItemDesc), new OperandValue(UOMID), new OperandValue(ActiveYNB), new OperandValue(ProjectLock));
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredPaymentTerms(Session session, string IDContains, string DescrContains, string Active)
        {
            return session.ExecuteSproc("filter_GetFilteredPaymentTerms", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredPayReasonList(Session session, string IDContains, string DescrContains, string Active)
        {
            return session.ExecuteSproc("filter_GetFilteredPayReasonList", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredPersonList(Session session, string IDContains, string DescrContains, string Active)
        {
            return session.ExecuteSproc("filter_GetFilteredPersonList", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredPersonSkillList(Session session, string ID, string Descr, string Active)
        {
            return session.ExecuteSproc("filter_GetFilteredPersonSkillList", new OperandValue(ID), new OperandValue(Descr), new OperandValue(Active));
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredPlannedJobCostsList(Session session, int MatchJobType, int MatchJobAgainst, string JobIDLike, string FromHistoryYNB, string IsIssuedYNB, DateTime StartingReqDate, DateTime EndingReqDate, DateTime StartDateStart, DateTime StartDateEnd, string TitleContains, string MatchLaborClass, string MatchStatus, string MatchGroup, string MatchPriority, string MatchReason, string MatchArea, string MatchObjectType, string MachineIDContains, string MatchOutcomeCode, string ObjIDDescrContains, string MatchTaskID, int UserID, DateTime CompStartDate, DateTime CompEndDate, string JobCrew, string JobSupervisor, string MatchStateRoute, string MatchLocation, string PostedBy, DateTime PostStartDate, DateTime PostEndDate, string MatchWorkType, DateTime IssuedStartDate, DateTime IssuedEndDate, string RequestedBy, string RouteTo, string Notes, string MiscRef)
        {
            return session.ExecuteSproc("filter_GetFilteredPlannedJobCostsList", new OperandValue(MatchJobType), new OperandValue(MatchJobAgainst), new OperandValue(JobIDLike), new OperandValue(FromHistoryYNB), new OperandValue(IsIssuedYNB), new OperandValue(StartingReqDate), new OperandValue(EndingReqDate), new OperandValue(StartDateStart), new OperandValue(StartDateEnd), new OperandValue(TitleContains), new OperandValue(MatchLaborClass), new OperandValue(MatchStatus), new OperandValue(MatchGroup), new OperandValue(MatchPriority), new OperandValue(MatchReason), new OperandValue(MatchArea), new OperandValue(MatchObjectType), new OperandValue(MachineIDContains), new OperandValue(MatchOutcomeCode), new OperandValue(ObjIDDescrContains), new OperandValue(MatchTaskID), new OperandValue(UserID), new OperandValue(CompStartDate), new OperandValue(CompEndDate), new OperandValue(JobCrew), new OperandValue(JobSupervisor), new OperandValue(MatchStateRoute), new OperandValue(MatchLocation), new OperandValue(PostedBy), new OperandValue(PostStartDate), new OperandValue(PostEndDate), new OperandValue(MatchWorkType), new OperandValue(IssuedStartDate), new OperandValue(IssuedEndDate), new OperandValue(RequestedBy), new OperandValue(RouteTo), new OperandValue(Notes), new OperandValue(MiscRef));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredPlannedJobCostsListResult> Execfilter_GetFilteredPlannedJobCostsListIntoObjects(Session session, int MatchJobType, int MatchJobAgainst, string JobIDLike, string FromHistoryYNB, string IsIssuedYNB, DateTime StartingReqDate, DateTime EndingReqDate, DateTime StartDateStart, DateTime StartDateEnd, string TitleContains, string MatchLaborClass, string MatchStatus, string MatchGroup, string MatchPriority, string MatchReason, string MatchArea, string MatchObjectType, string MachineIDContains, string MatchOutcomeCode, string ObjIDDescrContains, string MatchTaskID, int UserID, DateTime CompStartDate, DateTime CompEndDate, string JobCrew, string JobSupervisor, string MatchStateRoute, string MatchLocation, string PostedBy, DateTime PostStartDate, DateTime PostEndDate, string MatchWorkType, DateTime IssuedStartDate, DateTime IssuedEndDate, string RequestedBy, string RouteTo, string Notes, string MiscRef)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredPlannedJobCostsListResult>("filter_GetFilteredPlannedJobCostsList", new OperandValue(MatchJobType), new OperandValue(MatchJobAgainst), new OperandValue(JobIDLike), new OperandValue(FromHistoryYNB), new OperandValue(IsIssuedYNB), new OperandValue(StartingReqDate), new OperandValue(EndingReqDate), new OperandValue(StartDateStart), new OperandValue(StartDateEnd), new OperandValue(TitleContains), new OperandValue(MatchLaborClass), new OperandValue(MatchStatus), new OperandValue(MatchGroup), new OperandValue(MatchPriority), new OperandValue(MatchReason), new OperandValue(MatchArea), new OperandValue(MatchObjectType), new OperandValue(MachineIDContains), new OperandValue(MatchOutcomeCode), new OperandValue(ObjIDDescrContains), new OperandValue(MatchTaskID), new OperandValue(UserID), new OperandValue(CompStartDate), new OperandValue(CompEndDate), new OperandValue(JobCrew), new OperandValue(JobSupervisor), new OperandValue(MatchStateRoute), new OperandValue(MatchLocation), new OperandValue(PostedBy), new OperandValue(PostStartDate), new OperandValue(PostEndDate), new OperandValue(MatchWorkType), new OperandValue(IssuedStartDate), new OperandValue(IssuedEndDate), new OperandValue(RequestedBy), new OperandValue(RouteTo), new OperandValue(Notes), new OperandValue(MiscRef));
        }
        public static XPDataView Execfilter_GetFilteredPlannedJobCostsListIntoDataView(Session session, int MatchJobType, int MatchJobAgainst, string JobIDLike, string FromHistoryYNB, string IsIssuedYNB, DateTime StartingReqDate, DateTime EndingReqDate, DateTime StartDateStart, DateTime StartDateEnd, string TitleContains, string MatchLaborClass, string MatchStatus, string MatchGroup, string MatchPriority, string MatchReason, string MatchArea, string MatchObjectType, string MachineIDContains, string MatchOutcomeCode, string ObjIDDescrContains, string MatchTaskID, int UserID, DateTime CompStartDate, DateTime CompEndDate, string JobCrew, string JobSupervisor, string MatchStateRoute, string MatchLocation, string PostedBy, DateTime PostStartDate, DateTime PostEndDate, string MatchWorkType, DateTime IssuedStartDate, DateTime IssuedEndDate, string RequestedBy, string RouteTo, string Notes, string MiscRef)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredPlannedJobCostsList", new OperandValue(MatchJobType), new OperandValue(MatchJobAgainst), new OperandValue(JobIDLike), new OperandValue(FromHistoryYNB), new OperandValue(IsIssuedYNB), new OperandValue(StartingReqDate), new OperandValue(EndingReqDate), new OperandValue(StartDateStart), new OperandValue(StartDateEnd), new OperandValue(TitleContains), new OperandValue(MatchLaborClass), new OperandValue(MatchStatus), new OperandValue(MatchGroup), new OperandValue(MatchPriority), new OperandValue(MatchReason), new OperandValue(MatchArea), new OperandValue(MatchObjectType), new OperandValue(MachineIDContains), new OperandValue(MatchOutcomeCode), new OperandValue(ObjIDDescrContains), new OperandValue(MatchTaskID), new OperandValue(UserID), new OperandValue(CompStartDate), new OperandValue(CompEndDate), new OperandValue(JobCrew), new OperandValue(JobSupervisor), new OperandValue(MatchStateRoute), new OperandValue(MatchLocation), new OperandValue(PostedBy), new OperandValue(PostStartDate), new OperandValue(PostEndDate), new OperandValue(MatchWorkType), new OperandValue(IssuedStartDate), new OperandValue(IssuedEndDate), new OperandValue(RequestedBy), new OperandValue(RouteTo), new OperandValue(Notes), new OperandValue(MiscRef));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredPlannedJobCostsListResult)), sprocData);
        }
        public static void Execfilter_GetFilteredPlannedJobCostsListIntoDataView(XPDataView dataView, Session session, int MatchJobType, int MatchJobAgainst, string JobIDLike, string FromHistoryYNB, string IsIssuedYNB, DateTime StartingReqDate, DateTime EndingReqDate, DateTime StartDateStart, DateTime StartDateEnd, string TitleContains, string MatchLaborClass, string MatchStatus, string MatchGroup, string MatchPriority, string MatchReason, string MatchArea, string MatchObjectType, string MachineIDContains, string MatchOutcomeCode, string ObjIDDescrContains, string MatchTaskID, int UserID, DateTime CompStartDate, DateTime CompEndDate, string JobCrew, string JobSupervisor, string MatchStateRoute, string MatchLocation, string PostedBy, DateTime PostStartDate, DateTime PostEndDate, string MatchWorkType, DateTime IssuedStartDate, DateTime IssuedEndDate, string RequestedBy, string RouteTo, string Notes, string MiscRef)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredPlannedJobCostsList", new OperandValue(MatchJobType), new OperandValue(MatchJobAgainst), new OperandValue(JobIDLike), new OperandValue(FromHistoryYNB), new OperandValue(IsIssuedYNB), new OperandValue(StartingReqDate), new OperandValue(EndingReqDate), new OperandValue(StartDateStart), new OperandValue(StartDateEnd), new OperandValue(TitleContains), new OperandValue(MatchLaborClass), new OperandValue(MatchStatus), new OperandValue(MatchGroup), new OperandValue(MatchPriority), new OperandValue(MatchReason), new OperandValue(MatchArea), new OperandValue(MatchObjectType), new OperandValue(MachineIDContains), new OperandValue(MatchOutcomeCode), new OperandValue(ObjIDDescrContains), new OperandValue(MatchTaskID), new OperandValue(UserID), new OperandValue(CompStartDate), new OperandValue(CompEndDate), new OperandValue(JobCrew), new OperandValue(JobSupervisor), new OperandValue(MatchStateRoute), new OperandValue(MatchLocation), new OperandValue(PostedBy), new OperandValue(PostStartDate), new OperandValue(PostEndDate), new OperandValue(MatchWorkType), new OperandValue(IssuedStartDate), new OperandValue(IssuedEndDate), new OperandValue(RequestedBy), new OperandValue(RouteTo), new OperandValue(Notes), new OperandValue(MiscRef));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredPlannedJobCostsListResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredPlannedJobCostsListOld(Session session, int MatchJobType, int MatchJobAgainst, string JobIDLike, string FromHistoryYNB, string IsIssuedYNB, DateTime StartingReqDate, DateTime EndingReqDate, DateTime StartDateStart, DateTime StartDateEnd, string TitleContains, string MatchLaborClass, string MatchStatus, string MatchGroup, string MatchPriority, string MatchReason, string MatchArea, string MatchObjectType, string MachineIDContains, string MatchOutcomeCode, string ObjIDDescrContains, string MatchTaskID, int UserID, DateTime CompStartDate, DateTime CompEndDate, string JobCrew, string JobSupervisor, string MatchStateRoute, string MatchLocation, string PostedBy, DateTime PostStartDate, DateTime PostEndDate, string MatchWorkType, DateTime IssuedStartDate, DateTime IssuedEndDate, string RequestedBy, string RouteTo, string Notes, string MiscRef)
        {
            return session.ExecuteSproc("filter_GetFilteredPlannedJobCostsListOld", new OperandValue(MatchJobType), new OperandValue(MatchJobAgainst), new OperandValue(JobIDLike), new OperandValue(FromHistoryYNB), new OperandValue(IsIssuedYNB), new OperandValue(StartingReqDate), new OperandValue(EndingReqDate), new OperandValue(StartDateStart), new OperandValue(StartDateEnd), new OperandValue(TitleContains), new OperandValue(MatchLaborClass), new OperandValue(MatchStatus), new OperandValue(MatchGroup), new OperandValue(MatchPriority), new OperandValue(MatchReason), new OperandValue(MatchArea), new OperandValue(MatchObjectType), new OperandValue(MachineIDContains), new OperandValue(MatchOutcomeCode), new OperandValue(ObjIDDescrContains), new OperandValue(MatchTaskID), new OperandValue(UserID), new OperandValue(CompStartDate), new OperandValue(CompEndDate), new OperandValue(JobCrew), new OperandValue(JobSupervisor), new OperandValue(MatchStateRoute), new OperandValue(MatchLocation), new OperandValue(PostedBy), new OperandValue(PostStartDate), new OperandValue(PostEndDate), new OperandValue(MatchWorkType), new OperandValue(IssuedStartDate), new OperandValue(IssuedEndDate), new OperandValue(RequestedBy), new OperandValue(RouteTo), new OperandValue(Notes), new OperandValue(MiscRef));
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredPlannedJobstepsList(Session session, int MatchJobType, int MatchJobAgainst, string JobIDLike, string FromHistoryYNB, string IsIssuedYNB, DateTime StartingReqDate, DateTime EndingReqDate, DateTime StartDateStart, DateTime StartDateEnd, string TitleContains, string MatchLaborClass, string MatchStatus, string MatchGroup, string MatchPriority, string MatchReason, string MatchArea, string MatchObjectType, string MachineIDContains, string MatchOutcomeCode, string ObjIDDescrContains, string MatchTaskID, int UserID, DateTime CompStartDate, DateTime CompEndDate, string JobCrew, string JobSupervisor, string MatchStateRoute, string MatchLocation, string PostedBy, DateTime PostStartDate, DateTime PostEndDate, string MatchWorkType, DateTime IssuedStartDate, DateTime IssuedEndDate, string RequestedBy, string RouteTo, string Notes, string MiscRef, string CostCodeID, string FundSourceID, string WorkOrderCodeID, string OrgCodeID, string FundGroupID, string ControlSectionID, string EquipNumberID, string IsBreakdownYNB, string HasAttachments)
        {
            return session.ExecuteSproc("filter_GetFilteredPlannedJobstepsList", new OperandValue(MatchJobType), new OperandValue(MatchJobAgainst), new OperandValue(JobIDLike), new OperandValue(FromHistoryYNB), new OperandValue(IsIssuedYNB), new OperandValue(StartingReqDate), new OperandValue(EndingReqDate), new OperandValue(StartDateStart), new OperandValue(StartDateEnd), new OperandValue(TitleContains), new OperandValue(MatchLaborClass), new OperandValue(MatchStatus), new OperandValue(MatchGroup), new OperandValue(MatchPriority), new OperandValue(MatchReason), new OperandValue(MatchArea), new OperandValue(MatchObjectType), new OperandValue(MachineIDContains), new OperandValue(MatchOutcomeCode), new OperandValue(ObjIDDescrContains), new OperandValue(MatchTaskID), new OperandValue(UserID), new OperandValue(CompStartDate), new OperandValue(CompEndDate), new OperandValue(JobCrew), new OperandValue(JobSupervisor), new OperandValue(MatchStateRoute), new OperandValue(MatchLocation), new OperandValue(PostedBy), new OperandValue(PostStartDate), new OperandValue(PostEndDate), new OperandValue(MatchWorkType), new OperandValue(IssuedStartDate), new OperandValue(IssuedEndDate), new OperandValue(RequestedBy), new OperandValue(RouteTo), new OperandValue(Notes), new OperandValue(MiscRef), new OperandValue(CostCodeID), new OperandValue(FundSourceID), new OperandValue(WorkOrderCodeID), new OperandValue(OrgCodeID), new OperandValue(FundGroupID), new OperandValue(ControlSectionID), new OperandValue(EquipNumberID), new OperandValue(IsBreakdownYNB), new OperandValue(HasAttachments));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredPlannedJobstepsListResult> Execfilter_GetFilteredPlannedJobstepsListIntoObjects(Session session, int MatchJobType, int MatchJobAgainst, string JobIDLike, string FromHistoryYNB, string IsIssuedYNB, DateTime StartingReqDate, DateTime EndingReqDate, DateTime StartDateStart, DateTime StartDateEnd, string TitleContains, string MatchLaborClass, string MatchStatus, string MatchGroup, string MatchPriority, string MatchReason, string MatchArea, string MatchObjectType, string MachineIDContains, string MatchOutcomeCode, string ObjIDDescrContains, string MatchTaskID, int UserID, DateTime CompStartDate, DateTime CompEndDate, string JobCrew, string JobSupervisor, string MatchStateRoute, string MatchLocation, string PostedBy, DateTime PostStartDate, DateTime PostEndDate, string MatchWorkType, DateTime IssuedStartDate, DateTime IssuedEndDate, string RequestedBy, string RouteTo, string Notes, string MiscRef, string CostCodeID, string FundSourceID, string WorkOrderCodeID, string OrgCodeID, string FundGroupID, string ControlSectionID, string EquipNumberID, string IsBreakdownYNB, string HasAttachments)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredPlannedJobstepsListResult>("filter_GetFilteredPlannedJobstepsList", new OperandValue(MatchJobType), new OperandValue(MatchJobAgainst), new OperandValue(JobIDLike), new OperandValue(FromHistoryYNB), new OperandValue(IsIssuedYNB), new OperandValue(StartingReqDate), new OperandValue(EndingReqDate), new OperandValue(StartDateStart), new OperandValue(StartDateEnd), new OperandValue(TitleContains), new OperandValue(MatchLaborClass), new OperandValue(MatchStatus), new OperandValue(MatchGroup), new OperandValue(MatchPriority), new OperandValue(MatchReason), new OperandValue(MatchArea), new OperandValue(MatchObjectType), new OperandValue(MachineIDContains), new OperandValue(MatchOutcomeCode), new OperandValue(ObjIDDescrContains), new OperandValue(MatchTaskID), new OperandValue(UserID), new OperandValue(CompStartDate), new OperandValue(CompEndDate), new OperandValue(JobCrew), new OperandValue(JobSupervisor), new OperandValue(MatchStateRoute), new OperandValue(MatchLocation), new OperandValue(PostedBy), new OperandValue(PostStartDate), new OperandValue(PostEndDate), new OperandValue(MatchWorkType), new OperandValue(IssuedStartDate), new OperandValue(IssuedEndDate), new OperandValue(RequestedBy), new OperandValue(RouteTo), new OperandValue(Notes), new OperandValue(MiscRef), new OperandValue(CostCodeID), new OperandValue(FundSourceID), new OperandValue(WorkOrderCodeID), new OperandValue(OrgCodeID), new OperandValue(FundGroupID), new OperandValue(ControlSectionID), new OperandValue(EquipNumberID), new OperandValue(IsBreakdownYNB), new OperandValue(HasAttachments));
        }
        public static XPDataView Execfilter_GetFilteredPlannedJobstepsListIntoDataView(Session session, int MatchJobType, int MatchJobAgainst, string JobIDLike, string FromHistoryYNB, string IsIssuedYNB, DateTime StartingReqDate, DateTime EndingReqDate, DateTime StartDateStart, DateTime StartDateEnd, string TitleContains, string MatchLaborClass, string MatchStatus, string MatchGroup, string MatchPriority, string MatchReason, string MatchArea, string MatchObjectType, string MachineIDContains, string MatchOutcomeCode, string ObjIDDescrContains, string MatchTaskID, int UserID, DateTime CompStartDate, DateTime CompEndDate, string JobCrew, string JobSupervisor, string MatchStateRoute, string MatchLocation, string PostedBy, DateTime PostStartDate, DateTime PostEndDate, string MatchWorkType, DateTime IssuedStartDate, DateTime IssuedEndDate, string RequestedBy, string RouteTo, string Notes, string MiscRef, string CostCodeID, string FundSourceID, string WorkOrderCodeID, string OrgCodeID, string FundGroupID, string ControlSectionID, string EquipNumberID, string IsBreakdownYNB, string HasAttachments)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredPlannedJobstepsList", new OperandValue(MatchJobType), new OperandValue(MatchJobAgainst), new OperandValue(JobIDLike), new OperandValue(FromHistoryYNB), new OperandValue(IsIssuedYNB), new OperandValue(StartingReqDate), new OperandValue(EndingReqDate), new OperandValue(StartDateStart), new OperandValue(StartDateEnd), new OperandValue(TitleContains), new OperandValue(MatchLaborClass), new OperandValue(MatchStatus), new OperandValue(MatchGroup), new OperandValue(MatchPriority), new OperandValue(MatchReason), new OperandValue(MatchArea), new OperandValue(MatchObjectType), new OperandValue(MachineIDContains), new OperandValue(MatchOutcomeCode), new OperandValue(ObjIDDescrContains), new OperandValue(MatchTaskID), new OperandValue(UserID), new OperandValue(CompStartDate), new OperandValue(CompEndDate), new OperandValue(JobCrew), new OperandValue(JobSupervisor), new OperandValue(MatchStateRoute), new OperandValue(MatchLocation), new OperandValue(PostedBy), new OperandValue(PostStartDate), new OperandValue(PostEndDate), new OperandValue(MatchWorkType), new OperandValue(IssuedStartDate), new OperandValue(IssuedEndDate), new OperandValue(RequestedBy), new OperandValue(RouteTo), new OperandValue(Notes), new OperandValue(MiscRef), new OperandValue(CostCodeID), new OperandValue(FundSourceID), new OperandValue(WorkOrderCodeID), new OperandValue(OrgCodeID), new OperandValue(FundGroupID), new OperandValue(ControlSectionID), new OperandValue(EquipNumberID), new OperandValue(IsBreakdownYNB), new OperandValue(HasAttachments));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredPlannedJobstepsListResult)), sprocData);
        }
        public static void Execfilter_GetFilteredPlannedJobstepsListIntoDataView(XPDataView dataView, Session session, int MatchJobType, int MatchJobAgainst, string JobIDLike, string FromHistoryYNB, string IsIssuedYNB, DateTime StartingReqDate, DateTime EndingReqDate, DateTime StartDateStart, DateTime StartDateEnd, string TitleContains, string MatchLaborClass, string MatchStatus, string MatchGroup, string MatchPriority, string MatchReason, string MatchArea, string MatchObjectType, string MachineIDContains, string MatchOutcomeCode, string ObjIDDescrContains, string MatchTaskID, int UserID, DateTime CompStartDate, DateTime CompEndDate, string JobCrew, string JobSupervisor, string MatchStateRoute, string MatchLocation, string PostedBy, DateTime PostStartDate, DateTime PostEndDate, string MatchWorkType, DateTime IssuedStartDate, DateTime IssuedEndDate, string RequestedBy, string RouteTo, string Notes, string MiscRef, string CostCodeID, string FundSourceID, string WorkOrderCodeID, string OrgCodeID, string FundGroupID, string ControlSectionID, string EquipNumberID, string IsBreakdownYNB, string HasAttachments)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredPlannedJobstepsList", new OperandValue(MatchJobType), new OperandValue(MatchJobAgainst), new OperandValue(JobIDLike), new OperandValue(FromHistoryYNB), new OperandValue(IsIssuedYNB), new OperandValue(StartingReqDate), new OperandValue(EndingReqDate), new OperandValue(StartDateStart), new OperandValue(StartDateEnd), new OperandValue(TitleContains), new OperandValue(MatchLaborClass), new OperandValue(MatchStatus), new OperandValue(MatchGroup), new OperandValue(MatchPriority), new OperandValue(MatchReason), new OperandValue(MatchArea), new OperandValue(MatchObjectType), new OperandValue(MachineIDContains), new OperandValue(MatchOutcomeCode), new OperandValue(ObjIDDescrContains), new OperandValue(MatchTaskID), new OperandValue(UserID), new OperandValue(CompStartDate), new OperandValue(CompEndDate), new OperandValue(JobCrew), new OperandValue(JobSupervisor), new OperandValue(MatchStateRoute), new OperandValue(MatchLocation), new OperandValue(PostedBy), new OperandValue(PostStartDate), new OperandValue(PostEndDate), new OperandValue(MatchWorkType), new OperandValue(IssuedStartDate), new OperandValue(IssuedEndDate), new OperandValue(RequestedBy), new OperandValue(RouteTo), new OperandValue(Notes), new OperandValue(MiscRef), new OperandValue(CostCodeID), new OperandValue(FundSourceID), new OperandValue(WorkOrderCodeID), new OperandValue(OrgCodeID), new OperandValue(FundGroupID), new OperandValue(ControlSectionID), new OperandValue(EquipNumberID), new OperandValue(IsBreakdownYNB), new OperandValue(HasAttachments));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredPlannedJobstepsListResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredPlannedJobstepsListOld(Session session, int MatchJobType, int MatchJobAgainst, string JobIDLike, string FromHistoryYNB, string IsIssuedYNB, DateTime StartingReqDate, DateTime EndingReqDate, DateTime StartDateStart, DateTime StartDateEnd, string TitleContains, string MatchLaborClass, string MatchStatus, string MatchGroup, string MatchPriority, string MatchReason, string MatchArea, string MatchObjectType, string MachineIDContains, string MatchOutcomeCode, string ObjIDDescrContains, string MatchTaskID, int UserID, DateTime CompStartDate, DateTime CompEndDate, string JobCrew, string JobSupervisor, string MatchStateRoute, string MatchLocation, string PostedBy, DateTime PostStartDate, DateTime PostEndDate, string MatchWorkType, DateTime IssuedStartDate, DateTime IssuedEndDate, string RequestedBy, string RouteTo, string Notes, string MiscRef, string CostCodeID, string FundSourceID, string WorkOrderCodeID, string OrgCodeID, string FundGroupID, string ControlSectionID, string EquipNumberID, string IsBreakdownYNB, string HasAttachments)
        {
            return session.ExecuteSproc("filter_GetFilteredPlannedJobstepsListOld", new OperandValue(MatchJobType), new OperandValue(MatchJobAgainst), new OperandValue(JobIDLike), new OperandValue(FromHistoryYNB), new OperandValue(IsIssuedYNB), new OperandValue(StartingReqDate), new OperandValue(EndingReqDate), new OperandValue(StartDateStart), new OperandValue(StartDateEnd), new OperandValue(TitleContains), new OperandValue(MatchLaborClass), new OperandValue(MatchStatus), new OperandValue(MatchGroup), new OperandValue(MatchPriority), new OperandValue(MatchReason), new OperandValue(MatchArea), new OperandValue(MatchObjectType), new OperandValue(MachineIDContains), new OperandValue(MatchOutcomeCode), new OperandValue(ObjIDDescrContains), new OperandValue(MatchTaskID), new OperandValue(UserID), new OperandValue(CompStartDate), new OperandValue(CompEndDate), new OperandValue(JobCrew), new OperandValue(JobSupervisor), new OperandValue(MatchStateRoute), new OperandValue(MatchLocation), new OperandValue(PostedBy), new OperandValue(PostStartDate), new OperandValue(PostEndDate), new OperandValue(MatchWorkType), new OperandValue(IssuedStartDate), new OperandValue(IssuedEndDate), new OperandValue(RequestedBy), new OperandValue(RouteTo), new OperandValue(Notes), new OperandValue(MiscRef), new OperandValue(CostCodeID), new OperandValue(FundSourceID), new OperandValue(WorkOrderCodeID), new OperandValue(OrgCodeID), new OperandValue(FundGroupID), new OperandValue(ControlSectionID), new OperandValue(EquipNumberID), new OperandValue(IsBreakdownYNB), new OperandValue(HasAttachments));
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredPMAAGJobstepsList(Session session, int MatchJobType, int MatchJobAgainst, string JobIDLike, string FromHistoryYNB, string IsIssuedYNB, DateTime StartingReqDate, DateTime EndingReqDate, DateTime StartDateStart, DateTime StartDateEnd, string TitleContains, string MatchLaborClass, string MatchStatus, string MatchGroup, string MatchPriority, string MatchReason, string MatchArea, string MatchObjectType, string MachineIDContains, string MatchOutcomeCode, string ObjIDDescrContains, string MatchTaskID, int UserID, DateTime CompStartDate, DateTime CompEndDate, string JobCrew, string JobSupervisor, string MatchStateRoute, string MatchLocation, string PostedBy, DateTime PostStartDate, DateTime PostEndDate, string MatchWorkType, DateTime IssuedStartDate, DateTime IssuedEndDate, string RequestedBy, string RouteTo, string Notes, string MiscRef, string CostCodeID, string FundSourceID, string WorkOrderCodeID, string OrgCodeID, string FundGroupID, string ControlSectionID, string EquipNumberID, string IsBreakdownYNB)
        {
            return session.ExecuteSproc("filter_GetFilteredPMAAGJobstepsList", new OperandValue(MatchJobType), new OperandValue(MatchJobAgainst), new OperandValue(JobIDLike), new OperandValue(FromHistoryYNB), new OperandValue(IsIssuedYNB), new OperandValue(StartingReqDate), new OperandValue(EndingReqDate), new OperandValue(StartDateStart), new OperandValue(StartDateEnd), new OperandValue(TitleContains), new OperandValue(MatchLaborClass), new OperandValue(MatchStatus), new OperandValue(MatchGroup), new OperandValue(MatchPriority), new OperandValue(MatchReason), new OperandValue(MatchArea), new OperandValue(MatchObjectType), new OperandValue(MachineIDContains), new OperandValue(MatchOutcomeCode), new OperandValue(ObjIDDescrContains), new OperandValue(MatchTaskID), new OperandValue(UserID), new OperandValue(CompStartDate), new OperandValue(CompEndDate), new OperandValue(JobCrew), new OperandValue(JobSupervisor), new OperandValue(MatchStateRoute), new OperandValue(MatchLocation), new OperandValue(PostedBy), new OperandValue(PostStartDate), new OperandValue(PostEndDate), new OperandValue(MatchWorkType), new OperandValue(IssuedStartDate), new OperandValue(IssuedEndDate), new OperandValue(RequestedBy), new OperandValue(RouteTo), new OperandValue(Notes), new OperandValue(MiscRef), new OperandValue(CostCodeID), new OperandValue(FundSourceID), new OperandValue(WorkOrderCodeID), new OperandValue(OrgCodeID), new OperandValue(FundGroupID), new OperandValue(ControlSectionID), new OperandValue(EquipNumberID), new OperandValue(IsBreakdownYNB));
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredPMTasksList(Session session, string TaskID, string TaskDesc, string TaskType, string AreaID, int UserID, string CrewID, string Notes, string IsActive, string HasAttachments)
        {
            return session.ExecuteSproc("filter_GetFilteredPMTasksList", new OperandValue(TaskID), new OperandValue(TaskDesc), new OperandValue(TaskType), new OperandValue(AreaID), new OperandValue(UserID), new OperandValue(CrewID), new OperandValue(Notes), new OperandValue(IsActive), new OperandValue(HasAttachments));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredPMTasksListResult> Execfilter_GetFilteredPMTasksListIntoObjects(Session session, string TaskID, string TaskDesc, string TaskType, string AreaID, int UserID, string CrewID, string Notes, string IsActive, string HasAttachments)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredPMTasksListResult>("filter_GetFilteredPMTasksList", new OperandValue(TaskID), new OperandValue(TaskDesc), new OperandValue(TaskType), new OperandValue(AreaID), new OperandValue(UserID), new OperandValue(CrewID), new OperandValue(Notes), new OperandValue(IsActive), new OperandValue(HasAttachments));
        }
        public static XPDataView Execfilter_GetFilteredPMTasksListIntoDataView(Session session, string TaskID, string TaskDesc, string TaskType, string AreaID, int UserID, string CrewID, string Notes, string IsActive, string HasAttachments)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredPMTasksList", new OperandValue(TaskID), new OperandValue(TaskDesc), new OperandValue(TaskType), new OperandValue(AreaID), new OperandValue(UserID), new OperandValue(CrewID), new OperandValue(Notes), new OperandValue(IsActive), new OperandValue(HasAttachments));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredPMTasksListResult)), sprocData);
        }
        public static void Execfilter_GetFilteredPMTasksListIntoDataView(XPDataView dataView, Session session, string TaskID, string TaskDesc, string TaskType, string AreaID, int UserID, string CrewID, string Notes, string IsActive, string HasAttachments)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredPMTasksList", new OperandValue(TaskID), new OperandValue(TaskDesc), new OperandValue(TaskType), new OperandValue(AreaID), new OperandValue(UserID), new OperandValue(CrewID), new OperandValue(Notes), new OperandValue(IsActive), new OperandValue(HasAttachments));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredPMTasksListResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredPMTasksListOld(Session session, string TaskID, string TaskDesc, string TaskType, string AreaID, int UserID, string CrewID, string Notes, string IsActive, string HasAttachments)
        {
            return session.ExecuteSproc("filter_GetFilteredPMTasksListOld", new OperandValue(TaskID), new OperandValue(TaskDesc), new OperandValue(TaskType), new OperandValue(AreaID), new OperandValue(UserID), new OperandValue(CrewID), new OperandValue(Notes), new OperandValue(IsActive), new OperandValue(HasAttachments));
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredPositionCodeList(Session session, string ID, string Descr, string Active)
        {
            return session.ExecuteSproc("filter_GetFilteredPositionCodeList", new OperandValue(ID), new OperandValue(Descr), new OperandValue(Active));
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredPriorityList(Session session, string ActiveYNB, string SystemYNB, string IDContains, string DescrContains)
        {
            return session.ExecuteSproc("filter_GetFilteredPriorityList", new OperandValue(ActiveYNB), new OperandValue(SystemYNB), new OperandValue(IDContains), new OperandValue(DescrContains));
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredProductLineList(Session session, string ProductLine, string Descr, string Active)
        {
            return session.ExecuteSproc("filter_GetFilteredProductLineList", new OperandValue(ProductLine), new OperandValue(Descr), new OperandValue(Active));
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredProjectConditions(Session session, string IDContains, string DescrContains, string Active)
        {
            return session.ExecuteSproc("filter_GetFilteredProjectConditions", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredProjectDiaries(Session session, string DiaryNum, string ProjectID, string WeatherID, string ProjCondition, string EngineerID, string PersonnelID, string PersonnelDesc, string EquipID, DateTime DTWorkDateBegin, DateTime DTWorkDateEnd, int UserID, string HasAttachments)
        {
            return session.ExecuteSproc("filter_GetFilteredProjectDiaries", new OperandValue(DiaryNum), new OperandValue(ProjectID), new OperandValue(WeatherID), new OperandValue(ProjCondition), new OperandValue(EngineerID), new OperandValue(PersonnelID), new OperandValue(PersonnelDesc), new OperandValue(EquipID), new OperandValue(DTWorkDateBegin), new OperandValue(DTWorkDateEnd), new OperandValue(UserID), new OperandValue(HasAttachments));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredProjectDiariesResult> Execfilter_GetFilteredProjectDiariesIntoObjects(Session session, string DiaryNum, string ProjectID, string WeatherID, string ProjCondition, string EngineerID, string PersonnelID, string PersonnelDesc, string EquipID, DateTime DTWorkDateBegin, DateTime DTWorkDateEnd, int UserID, string HasAttachments)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredProjectDiariesResult>("filter_GetFilteredProjectDiaries", new OperandValue(DiaryNum), new OperandValue(ProjectID), new OperandValue(WeatherID), new OperandValue(ProjCondition), new OperandValue(EngineerID), new OperandValue(PersonnelID), new OperandValue(PersonnelDesc), new OperandValue(EquipID), new OperandValue(DTWorkDateBegin), new OperandValue(DTWorkDateEnd), new OperandValue(UserID), new OperandValue(HasAttachments));
        }
        public static XPDataView Execfilter_GetFilteredProjectDiariesIntoDataView(Session session, string DiaryNum, string ProjectID, string WeatherID, string ProjCondition, string EngineerID, string PersonnelID, string PersonnelDesc, string EquipID, DateTime DTWorkDateBegin, DateTime DTWorkDateEnd, int UserID, string HasAttachments)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredProjectDiaries", new OperandValue(DiaryNum), new OperandValue(ProjectID), new OperandValue(WeatherID), new OperandValue(ProjCondition), new OperandValue(EngineerID), new OperandValue(PersonnelID), new OperandValue(PersonnelDesc), new OperandValue(EquipID), new OperandValue(DTWorkDateBegin), new OperandValue(DTWorkDateEnd), new OperandValue(UserID), new OperandValue(HasAttachments));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredProjectDiariesResult)), sprocData);
        }
        public static void Execfilter_GetFilteredProjectDiariesIntoDataView(XPDataView dataView, Session session, string DiaryNum, string ProjectID, string WeatherID, string ProjCondition, string EngineerID, string PersonnelID, string PersonnelDesc, string EquipID, DateTime DTWorkDateBegin, DateTime DTWorkDateEnd, int UserID, string HasAttachments)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredProjectDiaries", new OperandValue(DiaryNum), new OperandValue(ProjectID), new OperandValue(WeatherID), new OperandValue(ProjCondition), new OperandValue(EngineerID), new OperandValue(PersonnelID), new OperandValue(PersonnelDesc), new OperandValue(EquipID), new OperandValue(DTWorkDateBegin), new OperandValue(DTWorkDateEnd), new OperandValue(UserID), new OperandValue(HasAttachments));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredProjectDiariesResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredProjectsList(Session session, string IsActive, string IDContains, string DescrContains, string ChargeCode, string WorkOp, string PayItemID, string PayItemDesc, string PayItemUOM)
        {
            return session.ExecuteSproc("filter_GetFilteredProjectsList", new OperandValue(IsActive), new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(ChargeCode), new OperandValue(WorkOp), new OperandValue(PayItemID), new OperandValue(PayItemDesc), new OperandValue(PayItemUOM));
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredPurchaseAuthorities(Session session, string IDContains, string DescrContains, string Active)
        {
            return session.ExecuteSproc("filter_GetFilteredPurchaseAuthorities", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredPurchaseOrdersList(Session session, string POID, string SWLID, string PersonID, DateTime DateCreatedBegin, DateTime DateCreatedEnd, string Status, string FullyPricedYN, string ClosedYN, DateTime DateClosedBegin, DateTime DateClosedEnd, string VendorID, string PartIDLike, string PONotes, string ReqNotes, string CostCodeID, string SuppCode, string AreaID, string JobID, string LaborClassID, string GroupID, string PartDesc, string StoreroomID, string VendorPartID, DateTime StatusDateBegin, DateTime StatusDateEnd, DateTime ModifiedDateBegin, DateTime ModifiedDateEnd, DateTime ApprovedDateBegin, DateTime ApprovedDateEnd, string ReqOriginator, string AssignedBuyer, string ReqApprover, string POApprover, int UserID, string HasAttachments)
        {
            return session.ExecuteSproc("filter_GetFilteredPurchaseOrdersList", new OperandValue(POID), new OperandValue(SWLID), new OperandValue(PersonID), new OperandValue(DateCreatedBegin), new OperandValue(DateCreatedEnd), new OperandValue(Status), new OperandValue(FullyPricedYN), new OperandValue(ClosedYN), new OperandValue(DateClosedBegin), new OperandValue(DateClosedEnd), new OperandValue(VendorID), new OperandValue(PartIDLike), new OperandValue(PONotes), new OperandValue(ReqNotes), new OperandValue(CostCodeID), new OperandValue(SuppCode), new OperandValue(AreaID), new OperandValue(JobID), new OperandValue(LaborClassID), new OperandValue(GroupID), new OperandValue(PartDesc), new OperandValue(StoreroomID), new OperandValue(VendorPartID), new OperandValue(StatusDateBegin), new OperandValue(StatusDateEnd), new OperandValue(ModifiedDateBegin), new OperandValue(ModifiedDateEnd), new OperandValue(ApprovedDateBegin), new OperandValue(ApprovedDateEnd), new OperandValue(ReqOriginator), new OperandValue(AssignedBuyer), new OperandValue(ReqApprover), new OperandValue(POApprover), new OperandValue(UserID), new OperandValue(HasAttachments));
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredPurchaseOrdersListDetail(Session session, string POID, string SWLID, string PersonID, DateTime DateCreatedBegin, DateTime DateCreatedEnd, string Status, string FullyPricedYN, string ClosedYN, DateTime DateClosedBegin, DateTime DateClosedEnd, string VendorID, string PartIDLike, string PONotes, string ReqNotes, string CostCodeID, string SuppCode, string AreaID, string JobID, string LaborClassID, string GroupID, string PartDesc, string StoreroomID, string VendorPartID, DateTime StatusDateBegin, DateTime StatusDateEnd, DateTime ModifiedDateBegin, DateTime ModifiedDateEnd, DateTime ApprovedDateBegin, DateTime ApprovedDateEnd, string ReqOriginator, string AssignedBuyer, string ReqApprover, string POApprover)
        {
            return session.ExecuteSproc("filter_GetFilteredPurchaseOrdersListDetail", new OperandValue(POID), new OperandValue(SWLID), new OperandValue(PersonID), new OperandValue(DateCreatedBegin), new OperandValue(DateCreatedEnd), new OperandValue(Status), new OperandValue(FullyPricedYN), new OperandValue(ClosedYN), new OperandValue(DateClosedBegin), new OperandValue(DateClosedEnd), new OperandValue(VendorID), new OperandValue(PartIDLike), new OperandValue(PONotes), new OperandValue(ReqNotes), new OperandValue(CostCodeID), new OperandValue(SuppCode), new OperandValue(AreaID), new OperandValue(JobID), new OperandValue(LaborClassID), new OperandValue(GroupID), new OperandValue(PartDesc), new OperandValue(StoreroomID), new OperandValue(VendorPartID), new OperandValue(StatusDateBegin), new OperandValue(StatusDateEnd), new OperandValue(ModifiedDateBegin), new OperandValue(ModifiedDateEnd), new OperandValue(ApprovedDateBegin), new OperandValue(ApprovedDateEnd), new OperandValue(ReqOriginator), new OperandValue(AssignedBuyer), new OperandValue(ReqApprover), new OperandValue(POApprover));
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredPurchaseOrdersListDetail2(Session session, string POID, string SWLID, string PersonID, DateTime DateCreatedBegin, DateTime DateCreatedEnd, string Status, string FullyPricedYN, string ClosedYN, DateTime DateClosedBegin, DateTime DateClosedEnd, string VendorID, string PartIDLike, string PONotes, string ReqNotes, string CostCodeID, string SuppCode, string AreaID, string JobID, string LaborClassID, string GroupID, string PartDesc, string StoreroomID, string VendorPartID, DateTime StatusDateBegin, DateTime StatusDateEnd, DateTime ModifiedDateBegin, DateTime ModifiedDateEnd, DateTime ApprovedDateBegin, DateTime ApprovedDateEnd, string ReqOriginator, string AssignedBuyer, string ReqApprover, string POApprover)
        {
            return session.ExecuteSproc("filter_GetFilteredPurchaseOrdersListDetail2", new OperandValue(POID), new OperandValue(SWLID), new OperandValue(PersonID), new OperandValue(DateCreatedBegin), new OperandValue(DateCreatedEnd), new OperandValue(Status), new OperandValue(FullyPricedYN), new OperandValue(ClosedYN), new OperandValue(DateClosedBegin), new OperandValue(DateClosedEnd), new OperandValue(VendorID), new OperandValue(PartIDLike), new OperandValue(PONotes), new OperandValue(ReqNotes), new OperandValue(CostCodeID), new OperandValue(SuppCode), new OperandValue(AreaID), new OperandValue(JobID), new OperandValue(LaborClassID), new OperandValue(GroupID), new OperandValue(PartDesc), new OperandValue(StoreroomID), new OperandValue(VendorPartID), new OperandValue(StatusDateBegin), new OperandValue(StatusDateEnd), new OperandValue(ModifiedDateBegin), new OperandValue(ModifiedDateEnd), new OperandValue(ApprovedDateBegin), new OperandValue(ApprovedDateEnd), new OperandValue(ReqOriginator), new OperandValue(AssignedBuyer), new OperandValue(ReqApprover), new OperandValue(POApprover));
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredRecentAutoRejectedItems(Session session, int ReqOrSI, string ID, string Notes, string UserID, DateTime RejectedStart, DateTime RejectedEnd, DateTime RequestStart, DateTime RequestEnd)
        {
            return session.ExecuteSproc("filter_GetFilteredRecentAutoRejectedItems", new OperandValue(ReqOrSI), new OperandValue(ID), new OperandValue(Notes), new OperandValue(UserID), new OperandValue(RejectedStart), new OperandValue(RejectedEnd), new OperandValue(RequestStart), new OperandValue(RequestEnd));
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredReportClassifications(Session session, string ID, string Descr, string Active)
        {
            return session.ExecuteSproc("filter_GetFilteredReportClassifications", new OperandValue(ID), new OperandValue(Descr), new OperandValue(Active));
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredSecurityTemplates(Session session, string ActiveLevel, string TemplateID, string TemplateDesc, string UserID, string FirstName, string LastName)
        {
            return session.ExecuteSproc("filter_GetFilteredSecurityTemplates", new OperandValue(ActiveLevel), new OperandValue(TemplateID), new OperandValue(TemplateDesc), new OperandValue(UserID), new OperandValue(FirstName), new OperandValue(LastName));
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredShippingAddresses(Session session, string ID, string Desc, string ShippingAddress, string Active)
        {
            return session.ExecuteSproc("filter_GetFilteredShippingAddresses", new OperandValue(ID), new OperandValue(Desc), new OperandValue(ShippingAddress), new OperandValue(Active));
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredShippingReports(Session session, string ShipRptID, string PONumber, string PersonID, string ReturnReasonID, DateTime DateShippedStart, DateTime DateShippedEnd, string ShipTo, string Originator, string PartID, DateTime DateCreatedStart, DateTime DateCreatedEnd, string ClosedYNB, int UserID, string HasAttachments)
        {
            return session.ExecuteSproc("filter_GetFilteredShippingReports", new OperandValue(ShipRptID), new OperandValue(PONumber), new OperandValue(PersonID), new OperandValue(ReturnReasonID), new OperandValue(DateShippedStart), new OperandValue(DateShippedEnd), new OperandValue(ShipTo), new OperandValue(Originator), new OperandValue(PartID), new OperandValue(DateCreatedStart), new OperandValue(DateCreatedEnd), new OperandValue(ClosedYNB), new OperandValue(UserID), new OperandValue(HasAttachments));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredShippingReportsResult> Execfilter_GetFilteredShippingReportsIntoObjects(Session session, string ShipRptID, string PONumber, string PersonID, string ReturnReasonID, DateTime DateShippedStart, DateTime DateShippedEnd, string ShipTo, string Originator, string PartID, DateTime DateCreatedStart, DateTime DateCreatedEnd, string ClosedYNB, int UserID, string HasAttachments)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredShippingReportsResult>("filter_GetFilteredShippingReports", new OperandValue(ShipRptID), new OperandValue(PONumber), new OperandValue(PersonID), new OperandValue(ReturnReasonID), new OperandValue(DateShippedStart), new OperandValue(DateShippedEnd), new OperandValue(ShipTo), new OperandValue(Originator), new OperandValue(PartID), new OperandValue(DateCreatedStart), new OperandValue(DateCreatedEnd), new OperandValue(ClosedYNB), new OperandValue(UserID), new OperandValue(HasAttachments));
        }
        public static XPDataView Execfilter_GetFilteredShippingReportsIntoDataView(Session session, string ShipRptID, string PONumber, string PersonID, string ReturnReasonID, DateTime DateShippedStart, DateTime DateShippedEnd, string ShipTo, string Originator, string PartID, DateTime DateCreatedStart, DateTime DateCreatedEnd, string ClosedYNB, int UserID, string HasAttachments)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredShippingReports", new OperandValue(ShipRptID), new OperandValue(PONumber), new OperandValue(PersonID), new OperandValue(ReturnReasonID), new OperandValue(DateShippedStart), new OperandValue(DateShippedEnd), new OperandValue(ShipTo), new OperandValue(Originator), new OperandValue(PartID), new OperandValue(DateCreatedStart), new OperandValue(DateCreatedEnd), new OperandValue(ClosedYNB), new OperandValue(UserID), new OperandValue(HasAttachments));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredShippingReportsResult)), sprocData);
        }
        public static void Execfilter_GetFilteredShippingReportsIntoDataView(XPDataView dataView, Session session, string ShipRptID, string PONumber, string PersonID, string ReturnReasonID, DateTime DateShippedStart, DateTime DateShippedEnd, string ShipTo, string Originator, string PartID, DateTime DateCreatedStart, DateTime DateCreatedEnd, string ClosedYNB, int UserID, string HasAttachments)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredShippingReports", new OperandValue(ShipRptID), new OperandValue(PONumber), new OperandValue(PersonID), new OperandValue(ReturnReasonID), new OperandValue(DateShippedStart), new OperandValue(DateShippedEnd), new OperandValue(ShipTo), new OperandValue(Originator), new OperandValue(PartID), new OperandValue(DateCreatedStart), new OperandValue(DateCreatedEnd), new OperandValue(ClosedYNB), new OperandValue(UserID), new OperandValue(HasAttachments));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredShippingReportsResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredShippingReturnReasons(Session session, string IDContains, string DescrContains, string Active)
        {
            return session.ExecuteSproc("filter_GetFilteredShippingReturnReasons", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredStateRoutes(Session session, string IDContains, string DescrContains, string CostCode, string Active)
        {
            return session.ExecuteSproc("filter_GetFilteredStateRoutes", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(CostCode), new OperandValue(Active));
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredStatusList(Session session, string StatusCode, string Descr, string Suspended, string System, string Stage, string Active)
        {
            return session.ExecuteSproc("filter_GetFilteredStatusList", new OperandValue(StatusCode), new OperandValue(Descr), new OperandValue(Suspended), new OperandValue(System), new OperandValue(Stage), new OperandValue(Active));
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredStoreroomList(Session session, string StoreroomID, string Descr, string AvgCost, string Active)
        {
            return session.ExecuteSproc("filter_GetFilteredStoreroomList", new OperandValue(StoreroomID), new OperandValue(Descr), new OperandValue(AvgCost), new OperandValue(Active));
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredStoreroomPartsList(Session session, int StoreroomLock, string StoreroomFilter, string PartNameContains, string DescLike, string AssignedToBuyer, string PartTypeID, string VendorID, string MfgID, string SpecialHandlingYNB, string BuyerCommentContains, decimal ListCostStart, decimal ListCostEnd, string VendorPartID, string MFGPartID, string ActiveSetting, string Aisle, string Shelf, string Bin, string Notes)
        {
            return session.ExecuteSproc("filter_GetFilteredStoreroomPartsList", new OperandValue(StoreroomLock), new OperandValue(StoreroomFilter), new OperandValue(PartNameContains), new OperandValue(DescLike), new OperandValue(AssignedToBuyer), new OperandValue(PartTypeID), new OperandValue(VendorID), new OperandValue(MfgID), new OperandValue(SpecialHandlingYNB), new OperandValue(BuyerCommentContains), new OperandValue(ListCostStart), new OperandValue(ListCostEnd), new OperandValue(VendorPartID), new OperandValue(MFGPartID), new OperandValue(ActiveSetting), new OperandValue(Aisle), new OperandValue(Shelf), new OperandValue(Bin), new OperandValue(Notes));
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredStoreroomTransferPartsList(Session session, int UserID)
        {
            return session.ExecuteSproc("filter_GetFilteredStoreroomTransferPartsList", new OperandValue(UserID));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredStoreroomTransferPartsListResult> Execfilter_GetFilteredStoreroomTransferPartsListIntoObjects(Session session, int UserID)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredStoreroomTransferPartsListResult>("filter_GetFilteredStoreroomTransferPartsList", new OperandValue(UserID));
        }
        public static XPDataView Execfilter_GetFilteredStoreroomTransferPartsListIntoDataView(Session session, int UserID)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredStoreroomTransferPartsList", new OperandValue(UserID));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredStoreroomTransferPartsListResult)), sprocData);
        }
        public static void Execfilter_GetFilteredStoreroomTransferPartsListIntoDataView(XPDataView dataView, Session session, int UserID)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredStoreroomTransferPartsList", new OperandValue(UserID));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredStoreroomTransferPartsListResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredStoreroomTransferStoreroomList(Session session, int UserID)
        {
            return session.ExecuteSproc("filter_GetFilteredStoreroomTransferStoreroomList", new OperandValue(UserID));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredStoreroomTransferStoreroomListResult> Execfilter_GetFilteredStoreroomTransferStoreroomListIntoObjects(Session session, int UserID)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredStoreroomTransferStoreroomListResult>("filter_GetFilteredStoreroomTransferStoreroomList", new OperandValue(UserID));
        }
        public static XPDataView Execfilter_GetFilteredStoreroomTransferStoreroomListIntoDataView(Session session, int UserID)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredStoreroomTransferStoreroomList", new OperandValue(UserID));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredStoreroomTransferStoreroomListResult)), sprocData);
        }
        public static void Execfilter_GetFilteredStoreroomTransferStoreroomListIntoDataView(XPDataView dataView, Session session, int UserID)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredStoreroomTransferStoreroomList", new OperandValue(UserID));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredStoreroomTransferStoreroomListResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredStoresIssueList(Session session, string SIID, string OrigSIID, string PersonID, DateTime RequestDateStart, DateTime RequestDateEnd, string Status, string ClosedYNB, DateTime DateNeededStart, DateTime DateNeededEnd, DateTime StatusDateStart, DateTime StatusDateEnd, DateTime ApprovalDateStart, DateTime ApprovalDateEnd, string CostCodeID, string StoreroomID, string AreaID, string PartID, string PartDesc, string MfgID, string MfgPartID, string Instructions, string Approver, string FundingSource, string WorkOrder, string WorkOp, string OrgCode, string FundingGroup, string EquipmentNumber, string ControlSection, int UserID, string HasAttachments)
        {
            return session.ExecuteSproc("filter_GetFilteredStoresIssueList", new OperandValue(SIID), new OperandValue(OrigSIID), new OperandValue(PersonID), new OperandValue(RequestDateStart), new OperandValue(RequestDateEnd), new OperandValue(Status), new OperandValue(ClosedYNB), new OperandValue(DateNeededStart), new OperandValue(DateNeededEnd), new OperandValue(StatusDateStart), new OperandValue(StatusDateEnd), new OperandValue(ApprovalDateStart), new OperandValue(ApprovalDateEnd), new OperandValue(CostCodeID), new OperandValue(StoreroomID), new OperandValue(AreaID), new OperandValue(PartID), new OperandValue(PartDesc), new OperandValue(MfgID), new OperandValue(MfgPartID), new OperandValue(Instructions), new OperandValue(Approver), new OperandValue(FundingSource), new OperandValue(WorkOrder), new OperandValue(WorkOp), new OperandValue(OrgCode), new OperandValue(FundingGroup), new OperandValue(EquipmentNumber), new OperandValue(ControlSection), new OperandValue(UserID), new OperandValue(HasAttachments));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredStoresIssueListResult> Execfilter_GetFilteredStoresIssueListIntoObjects(Session session, string SIID, string OrigSIID, string PersonID, DateTime RequestDateStart, DateTime RequestDateEnd, string Status, string ClosedYNB, DateTime DateNeededStart, DateTime DateNeededEnd, DateTime StatusDateStart, DateTime StatusDateEnd, DateTime ApprovalDateStart, DateTime ApprovalDateEnd, string CostCodeID, string StoreroomID, string AreaID, string PartID, string PartDesc, string MfgID, string MfgPartID, string Instructions, string Approver, string FundingSource, string WorkOrder, string WorkOp, string OrgCode, string FundingGroup, string EquipmentNumber, string ControlSection, int UserID, string HasAttachments)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredStoresIssueListResult>("filter_GetFilteredStoresIssueList", new OperandValue(SIID), new OperandValue(OrigSIID), new OperandValue(PersonID), new OperandValue(RequestDateStart), new OperandValue(RequestDateEnd), new OperandValue(Status), new OperandValue(ClosedYNB), new OperandValue(DateNeededStart), new OperandValue(DateNeededEnd), new OperandValue(StatusDateStart), new OperandValue(StatusDateEnd), new OperandValue(ApprovalDateStart), new OperandValue(ApprovalDateEnd), new OperandValue(CostCodeID), new OperandValue(StoreroomID), new OperandValue(AreaID), new OperandValue(PartID), new OperandValue(PartDesc), new OperandValue(MfgID), new OperandValue(MfgPartID), new OperandValue(Instructions), new OperandValue(Approver), new OperandValue(FundingSource), new OperandValue(WorkOrder), new OperandValue(WorkOp), new OperandValue(OrgCode), new OperandValue(FundingGroup), new OperandValue(EquipmentNumber), new OperandValue(ControlSection), new OperandValue(UserID), new OperandValue(HasAttachments));
        }
        public static XPDataView Execfilter_GetFilteredStoresIssueListIntoDataView(Session session, string SIID, string OrigSIID, string PersonID, DateTime RequestDateStart, DateTime RequestDateEnd, string Status, string ClosedYNB, DateTime DateNeededStart, DateTime DateNeededEnd, DateTime StatusDateStart, DateTime StatusDateEnd, DateTime ApprovalDateStart, DateTime ApprovalDateEnd, string CostCodeID, string StoreroomID, string AreaID, string PartID, string PartDesc, string MfgID, string MfgPartID, string Instructions, string Approver, string FundingSource, string WorkOrder, string WorkOp, string OrgCode, string FundingGroup, string EquipmentNumber, string ControlSection, int UserID, string HasAttachments)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredStoresIssueList", new OperandValue(SIID), new OperandValue(OrigSIID), new OperandValue(PersonID), new OperandValue(RequestDateStart), new OperandValue(RequestDateEnd), new OperandValue(Status), new OperandValue(ClosedYNB), new OperandValue(DateNeededStart), new OperandValue(DateNeededEnd), new OperandValue(StatusDateStart), new OperandValue(StatusDateEnd), new OperandValue(ApprovalDateStart), new OperandValue(ApprovalDateEnd), new OperandValue(CostCodeID), new OperandValue(StoreroomID), new OperandValue(AreaID), new OperandValue(PartID), new OperandValue(PartDesc), new OperandValue(MfgID), new OperandValue(MfgPartID), new OperandValue(Instructions), new OperandValue(Approver), new OperandValue(FundingSource), new OperandValue(WorkOrder), new OperandValue(WorkOp), new OperandValue(OrgCode), new OperandValue(FundingGroup), new OperandValue(EquipmentNumber), new OperandValue(ControlSection), new OperandValue(UserID), new OperandValue(HasAttachments));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredStoresIssueListResult)), sprocData);
        }
        public static void Execfilter_GetFilteredStoresIssueListIntoDataView(XPDataView dataView, Session session, string SIID, string OrigSIID, string PersonID, DateTime RequestDateStart, DateTime RequestDateEnd, string Status, string ClosedYNB, DateTime DateNeededStart, DateTime DateNeededEnd, DateTime StatusDateStart, DateTime StatusDateEnd, DateTime ApprovalDateStart, DateTime ApprovalDateEnd, string CostCodeID, string StoreroomID, string AreaID, string PartID, string PartDesc, string MfgID, string MfgPartID, string Instructions, string Approver, string FundingSource, string WorkOrder, string WorkOp, string OrgCode, string FundingGroup, string EquipmentNumber, string ControlSection, int UserID, string HasAttachments)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredStoresIssueList", new OperandValue(SIID), new OperandValue(OrigSIID), new OperandValue(PersonID), new OperandValue(RequestDateStart), new OperandValue(RequestDateEnd), new OperandValue(Status), new OperandValue(ClosedYNB), new OperandValue(DateNeededStart), new OperandValue(DateNeededEnd), new OperandValue(StatusDateStart), new OperandValue(StatusDateEnd), new OperandValue(ApprovalDateStart), new OperandValue(ApprovalDateEnd), new OperandValue(CostCodeID), new OperandValue(StoreroomID), new OperandValue(AreaID), new OperandValue(PartID), new OperandValue(PartDesc), new OperandValue(MfgID), new OperandValue(MfgPartID), new OperandValue(Instructions), new OperandValue(Approver), new OperandValue(FundingSource), new OperandValue(WorkOrder), new OperandValue(WorkOp), new OperandValue(OrgCode), new OperandValue(FundingGroup), new OperandValue(EquipmentNumber), new OperandValue(ControlSection), new OperandValue(UserID), new OperandValue(HasAttachments));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredStoresIssueListResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredStoresWantBuyers(Session session, string SWLID, DateTime RequiredDateBegin, DateTime RequiredDateEnd, string PersonID, string SupReviewedYN, string BuyReviewedYN, string ClosedYN, string Status, string PricedOnlyYN, DateTime DateClosedBegin, DateTime DateClosedEnd, DateTime DateOpenedBegin, DateTime DateOpenedEnd, string JobID, string CostCodeID, string AreaID, string Notes, string StoreroomID, string VendorID, string VendorPartID, DateTime StatusDateBegin, DateTime StatusDateEnd, DateTime ApprovalDateBegin, DateTime ApprovalDateEnd, string PartID, string PartDesc, string AssignedBuyer, DateTime LastModifiedBegin, DateTime LastModifiedEnd)
        {
            return session.ExecuteSproc("filter_GetFilteredStoresWantBuyers", new OperandValue(SWLID), new OperandValue(RequiredDateBegin), new OperandValue(RequiredDateEnd), new OperandValue(PersonID), new OperandValue(SupReviewedYN), new OperandValue(BuyReviewedYN), new OperandValue(ClosedYN), new OperandValue(Status), new OperandValue(PricedOnlyYN), new OperandValue(DateClosedBegin), new OperandValue(DateClosedEnd), new OperandValue(DateOpenedBegin), new OperandValue(DateOpenedEnd), new OperandValue(JobID), new OperandValue(CostCodeID), new OperandValue(AreaID), new OperandValue(Notes), new OperandValue(StoreroomID), new OperandValue(VendorID), new OperandValue(VendorPartID), new OperandValue(StatusDateBegin), new OperandValue(StatusDateEnd), new OperandValue(ApprovalDateBegin), new OperandValue(ApprovalDateEnd), new OperandValue(PartID), new OperandValue(PartDesc), new OperandValue(AssignedBuyer), new OperandValue(LastModifiedBegin), new OperandValue(LastModifiedEnd));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredStoresWantBuyersResult> Execfilter_GetFilteredStoresWantBuyersIntoObjects(Session session, string SWLID, DateTime RequiredDateBegin, DateTime RequiredDateEnd, string PersonID, string SupReviewedYN, string BuyReviewedYN, string ClosedYN, string Status, string PricedOnlyYN, DateTime DateClosedBegin, DateTime DateClosedEnd, DateTime DateOpenedBegin, DateTime DateOpenedEnd, string JobID, string CostCodeID, string AreaID, string Notes, string StoreroomID, string VendorID, string VendorPartID, DateTime StatusDateBegin, DateTime StatusDateEnd, DateTime ApprovalDateBegin, DateTime ApprovalDateEnd, string PartID, string PartDesc, string AssignedBuyer, DateTime LastModifiedBegin, DateTime LastModifiedEnd)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredStoresWantBuyersResult>("filter_GetFilteredStoresWantBuyers", new OperandValue(SWLID), new OperandValue(RequiredDateBegin), new OperandValue(RequiredDateEnd), new OperandValue(PersonID), new OperandValue(SupReviewedYN), new OperandValue(BuyReviewedYN), new OperandValue(ClosedYN), new OperandValue(Status), new OperandValue(PricedOnlyYN), new OperandValue(DateClosedBegin), new OperandValue(DateClosedEnd), new OperandValue(DateOpenedBegin), new OperandValue(DateOpenedEnd), new OperandValue(JobID), new OperandValue(CostCodeID), new OperandValue(AreaID), new OperandValue(Notes), new OperandValue(StoreroomID), new OperandValue(VendorID), new OperandValue(VendorPartID), new OperandValue(StatusDateBegin), new OperandValue(StatusDateEnd), new OperandValue(ApprovalDateBegin), new OperandValue(ApprovalDateEnd), new OperandValue(PartID), new OperandValue(PartDesc), new OperandValue(AssignedBuyer), new OperandValue(LastModifiedBegin), new OperandValue(LastModifiedEnd));
        }
        public static XPDataView Execfilter_GetFilteredStoresWantBuyersIntoDataView(Session session, string SWLID, DateTime RequiredDateBegin, DateTime RequiredDateEnd, string PersonID, string SupReviewedYN, string BuyReviewedYN, string ClosedYN, string Status, string PricedOnlyYN, DateTime DateClosedBegin, DateTime DateClosedEnd, DateTime DateOpenedBegin, DateTime DateOpenedEnd, string JobID, string CostCodeID, string AreaID, string Notes, string StoreroomID, string VendorID, string VendorPartID, DateTime StatusDateBegin, DateTime StatusDateEnd, DateTime ApprovalDateBegin, DateTime ApprovalDateEnd, string PartID, string PartDesc, string AssignedBuyer, DateTime LastModifiedBegin, DateTime LastModifiedEnd)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredStoresWantBuyers", new OperandValue(SWLID), new OperandValue(RequiredDateBegin), new OperandValue(RequiredDateEnd), new OperandValue(PersonID), new OperandValue(SupReviewedYN), new OperandValue(BuyReviewedYN), new OperandValue(ClosedYN), new OperandValue(Status), new OperandValue(PricedOnlyYN), new OperandValue(DateClosedBegin), new OperandValue(DateClosedEnd), new OperandValue(DateOpenedBegin), new OperandValue(DateOpenedEnd), new OperandValue(JobID), new OperandValue(CostCodeID), new OperandValue(AreaID), new OperandValue(Notes), new OperandValue(StoreroomID), new OperandValue(VendorID), new OperandValue(VendorPartID), new OperandValue(StatusDateBegin), new OperandValue(StatusDateEnd), new OperandValue(ApprovalDateBegin), new OperandValue(ApprovalDateEnd), new OperandValue(PartID), new OperandValue(PartDesc), new OperandValue(AssignedBuyer), new OperandValue(LastModifiedBegin), new OperandValue(LastModifiedEnd));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredStoresWantBuyersResult)), sprocData);
        }
        public static void Execfilter_GetFilteredStoresWantBuyersIntoDataView(XPDataView dataView, Session session, string SWLID, DateTime RequiredDateBegin, DateTime RequiredDateEnd, string PersonID, string SupReviewedYN, string BuyReviewedYN, string ClosedYN, string Status, string PricedOnlyYN, DateTime DateClosedBegin, DateTime DateClosedEnd, DateTime DateOpenedBegin, DateTime DateOpenedEnd, string JobID, string CostCodeID, string AreaID, string Notes, string StoreroomID, string VendorID, string VendorPartID, DateTime StatusDateBegin, DateTime StatusDateEnd, DateTime ApprovalDateBegin, DateTime ApprovalDateEnd, string PartID, string PartDesc, string AssignedBuyer, DateTime LastModifiedBegin, DateTime LastModifiedEnd)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredStoresWantBuyers", new OperandValue(SWLID), new OperandValue(RequiredDateBegin), new OperandValue(RequiredDateEnd), new OperandValue(PersonID), new OperandValue(SupReviewedYN), new OperandValue(BuyReviewedYN), new OperandValue(ClosedYN), new OperandValue(Status), new OperandValue(PricedOnlyYN), new OperandValue(DateClosedBegin), new OperandValue(DateClosedEnd), new OperandValue(DateOpenedBegin), new OperandValue(DateOpenedEnd), new OperandValue(JobID), new OperandValue(CostCodeID), new OperandValue(AreaID), new OperandValue(Notes), new OperandValue(StoreroomID), new OperandValue(VendorID), new OperandValue(VendorPartID), new OperandValue(StatusDateBegin), new OperandValue(StatusDateEnd), new OperandValue(ApprovalDateBegin), new OperandValue(ApprovalDateEnd), new OperandValue(PartID), new OperandValue(PartDesc), new OperandValue(AssignedBuyer), new OperandValue(LastModifiedBegin), new OperandValue(LastModifiedEnd));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredStoresWantBuyersResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredStoresWantList(Session session, string SWLID, DateTime RequiredDateBegin, DateTime RequiredDateEnd, string PersonID, string SupReviewedYN, string BuyReviewedYN, string ClosedYN, string Status, string PricedOnlyYN, DateTime DateClosedBegin, DateTime DateClosedEnd, DateTime DateOpenedBegin, DateTime DateOpenedEnd, string JobID, string CostCodeID, string AreaID, string Notes, string StoreroomID, string VendorID, string VendorPartID, DateTime StatusDateBegin, DateTime StatusDateEnd, DateTime ApprovalDateBegin, DateTime ApprovalDateEnd, string PartID, string PartDesc, string AssignedBuyer, DateTime LastModifiedBegin, DateTime LastModifiedEnd, string ApproverID, string OrigReviewedYN, string FundingSource, string WorkOrder, string WorkOp, string OrgCode, string FundingGroup, string EquipmentNumber, string ControlSection, int UserID, string HasAttachments)
        {
            return session.ExecuteSproc("filter_GetFilteredStoresWantList", new OperandValue(SWLID), new OperandValue(RequiredDateBegin), new OperandValue(RequiredDateEnd), new OperandValue(PersonID), new OperandValue(SupReviewedYN), new OperandValue(BuyReviewedYN), new OperandValue(ClosedYN), new OperandValue(Status), new OperandValue(PricedOnlyYN), new OperandValue(DateClosedBegin), new OperandValue(DateClosedEnd), new OperandValue(DateOpenedBegin), new OperandValue(DateOpenedEnd), new OperandValue(JobID), new OperandValue(CostCodeID), new OperandValue(AreaID), new OperandValue(Notes), new OperandValue(StoreroomID), new OperandValue(VendorID), new OperandValue(VendorPartID), new OperandValue(StatusDateBegin), new OperandValue(StatusDateEnd), new OperandValue(ApprovalDateBegin), new OperandValue(ApprovalDateEnd), new OperandValue(PartID), new OperandValue(PartDesc), new OperandValue(AssignedBuyer), new OperandValue(LastModifiedBegin), new OperandValue(LastModifiedEnd), new OperandValue(ApproverID), new OperandValue(OrigReviewedYN), new OperandValue(FundingSource), new OperandValue(WorkOrder), new OperandValue(WorkOp), new OperandValue(OrgCode), new OperandValue(FundingGroup), new OperandValue(EquipmentNumber), new OperandValue(ControlSection), new OperandValue(UserID), new OperandValue(HasAttachments));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredStoresWantListResult> Execfilter_GetFilteredStoresWantListIntoObjects(Session session, string SWLID, DateTime RequiredDateBegin, DateTime RequiredDateEnd, string PersonID, string SupReviewedYN, string BuyReviewedYN, string ClosedYN, string Status, string PricedOnlyYN, DateTime DateClosedBegin, DateTime DateClosedEnd, DateTime DateOpenedBegin, DateTime DateOpenedEnd, string JobID, string CostCodeID, string AreaID, string Notes, string StoreroomID, string VendorID, string VendorPartID, DateTime StatusDateBegin, DateTime StatusDateEnd, DateTime ApprovalDateBegin, DateTime ApprovalDateEnd, string PartID, string PartDesc, string AssignedBuyer, DateTime LastModifiedBegin, DateTime LastModifiedEnd, string ApproverID, string OrigReviewedYN, string FundingSource, string WorkOrder, string WorkOp, string OrgCode, string FundingGroup, string EquipmentNumber, string ControlSection, int UserID, string HasAttachments)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredStoresWantListResult>("filter_GetFilteredStoresWantList", new OperandValue(SWLID), new OperandValue(RequiredDateBegin), new OperandValue(RequiredDateEnd), new OperandValue(PersonID), new OperandValue(SupReviewedYN), new OperandValue(BuyReviewedYN), new OperandValue(ClosedYN), new OperandValue(Status), new OperandValue(PricedOnlyYN), new OperandValue(DateClosedBegin), new OperandValue(DateClosedEnd), new OperandValue(DateOpenedBegin), new OperandValue(DateOpenedEnd), new OperandValue(JobID), new OperandValue(CostCodeID), new OperandValue(AreaID), new OperandValue(Notes), new OperandValue(StoreroomID), new OperandValue(VendorID), new OperandValue(VendorPartID), new OperandValue(StatusDateBegin), new OperandValue(StatusDateEnd), new OperandValue(ApprovalDateBegin), new OperandValue(ApprovalDateEnd), new OperandValue(PartID), new OperandValue(PartDesc), new OperandValue(AssignedBuyer), new OperandValue(LastModifiedBegin), new OperandValue(LastModifiedEnd), new OperandValue(ApproverID), new OperandValue(OrigReviewedYN), new OperandValue(FundingSource), new OperandValue(WorkOrder), new OperandValue(WorkOp), new OperandValue(OrgCode), new OperandValue(FundingGroup), new OperandValue(EquipmentNumber), new OperandValue(ControlSection), new OperandValue(UserID), new OperandValue(HasAttachments));
        }
        public static XPDataView Execfilter_GetFilteredStoresWantListIntoDataView(Session session, string SWLID, DateTime RequiredDateBegin, DateTime RequiredDateEnd, string PersonID, string SupReviewedYN, string BuyReviewedYN, string ClosedYN, string Status, string PricedOnlyYN, DateTime DateClosedBegin, DateTime DateClosedEnd, DateTime DateOpenedBegin, DateTime DateOpenedEnd, string JobID, string CostCodeID, string AreaID, string Notes, string StoreroomID, string VendorID, string VendorPartID, DateTime StatusDateBegin, DateTime StatusDateEnd, DateTime ApprovalDateBegin, DateTime ApprovalDateEnd, string PartID, string PartDesc, string AssignedBuyer, DateTime LastModifiedBegin, DateTime LastModifiedEnd, string ApproverID, string OrigReviewedYN, string FundingSource, string WorkOrder, string WorkOp, string OrgCode, string FundingGroup, string EquipmentNumber, string ControlSection, int UserID, string HasAttachments)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredStoresWantList", new OperandValue(SWLID), new OperandValue(RequiredDateBegin), new OperandValue(RequiredDateEnd), new OperandValue(PersonID), new OperandValue(SupReviewedYN), new OperandValue(BuyReviewedYN), new OperandValue(ClosedYN), new OperandValue(Status), new OperandValue(PricedOnlyYN), new OperandValue(DateClosedBegin), new OperandValue(DateClosedEnd), new OperandValue(DateOpenedBegin), new OperandValue(DateOpenedEnd), new OperandValue(JobID), new OperandValue(CostCodeID), new OperandValue(AreaID), new OperandValue(Notes), new OperandValue(StoreroomID), new OperandValue(VendorID), new OperandValue(VendorPartID), new OperandValue(StatusDateBegin), new OperandValue(StatusDateEnd), new OperandValue(ApprovalDateBegin), new OperandValue(ApprovalDateEnd), new OperandValue(PartID), new OperandValue(PartDesc), new OperandValue(AssignedBuyer), new OperandValue(LastModifiedBegin), new OperandValue(LastModifiedEnd), new OperandValue(ApproverID), new OperandValue(OrigReviewedYN), new OperandValue(FundingSource), new OperandValue(WorkOrder), new OperandValue(WorkOp), new OperandValue(OrgCode), new OperandValue(FundingGroup), new OperandValue(EquipmentNumber), new OperandValue(ControlSection), new OperandValue(UserID), new OperandValue(HasAttachments));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredStoresWantListResult)), sprocData);
        }
        public static void Execfilter_GetFilteredStoresWantListIntoDataView(XPDataView dataView, Session session, string SWLID, DateTime RequiredDateBegin, DateTime RequiredDateEnd, string PersonID, string SupReviewedYN, string BuyReviewedYN, string ClosedYN, string Status, string PricedOnlyYN, DateTime DateClosedBegin, DateTime DateClosedEnd, DateTime DateOpenedBegin, DateTime DateOpenedEnd, string JobID, string CostCodeID, string AreaID, string Notes, string StoreroomID, string VendorID, string VendorPartID, DateTime StatusDateBegin, DateTime StatusDateEnd, DateTime ApprovalDateBegin, DateTime ApprovalDateEnd, string PartID, string PartDesc, string AssignedBuyer, DateTime LastModifiedBegin, DateTime LastModifiedEnd, string ApproverID, string OrigReviewedYN, string FundingSource, string WorkOrder, string WorkOp, string OrgCode, string FundingGroup, string EquipmentNumber, string ControlSection, int UserID, string HasAttachments)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredStoresWantList", new OperandValue(SWLID), new OperandValue(RequiredDateBegin), new OperandValue(RequiredDateEnd), new OperandValue(PersonID), new OperandValue(SupReviewedYN), new OperandValue(BuyReviewedYN), new OperandValue(ClosedYN), new OperandValue(Status), new OperandValue(PricedOnlyYN), new OperandValue(DateClosedBegin), new OperandValue(DateClosedEnd), new OperandValue(DateOpenedBegin), new OperandValue(DateOpenedEnd), new OperandValue(JobID), new OperandValue(CostCodeID), new OperandValue(AreaID), new OperandValue(Notes), new OperandValue(StoreroomID), new OperandValue(VendorID), new OperandValue(VendorPartID), new OperandValue(StatusDateBegin), new OperandValue(StatusDateEnd), new OperandValue(ApprovalDateBegin), new OperandValue(ApprovalDateEnd), new OperandValue(PartID), new OperandValue(PartDesc), new OperandValue(AssignedBuyer), new OperandValue(LastModifiedBegin), new OperandValue(LastModifiedEnd), new OperandValue(ApproverID), new OperandValue(OrigReviewedYN), new OperandValue(FundingSource), new OperandValue(WorkOrder), new OperandValue(WorkOp), new OperandValue(OrgCode), new OperandValue(FundingGroup), new OperandValue(EquipmentNumber), new OperandValue(ControlSection), new OperandValue(UserID), new OperandValue(HasAttachments));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredStoresWantListResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredSubAssemblyNames(Session session, string ID, string Desc, string Active)
        {
            return session.ExecuteSproc("filter_GetFilteredSubAssemblyNames", new OperandValue(ID), new OperandValue(Desc), new OperandValue(Active));
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredTaskList(Session session, string IDContains, string DescrContains)
        {
            return session.ExecuteSproc("filter_GetFilteredTaskList", new OperandValue(IDContains), new OperandValue(DescrContains));
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredUnitsOfIssue(Session session, string IDContains, string DescrContains, string Active)
        {
            return session.ExecuteSproc("filter_GetFilteredUnitsOfIssue", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredUnitsOfMeasure(Session session, string IDContains, string DescrContains, string Active)
        {
            return session.ExecuteSproc("filter_GetFilteredUnitsOfMeasure", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredVendorList(Session session, string Vendor, string Descr, string Carrier, string City, string State, string Contact, string Phone, string Website, int MasterpartID, string Active)
        {
            return session.ExecuteSproc("filter_GetFilteredVendorList", new OperandValue(Vendor), new OperandValue(Descr), new OperandValue(Carrier), new OperandValue(City), new OperandValue(State), new OperandValue(Contact), new OperandValue(Phone), new OperandValue(Website), new OperandValue(MasterpartID), new OperandValue(Active));
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredWeather(Session session, string IDContains, string DescrContains, string Active)
        {
            return session.ExecuteSproc("filter_GetFilteredWeather", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredWorkEventGroupings(Session session, string IDContains, string DescrContains, string Active)
        {
            return session.ExecuteSproc("filter_GetFilteredWorkEventGroupings", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredWorkEventList(Session session, string ID, string Descr, string Notes, string EventGroup, string ActiveYNB)
        {
            return session.ExecuteSproc("filter_GetFilteredWorkEventList", new OperandValue(ID), new OperandValue(Descr), new OperandValue(Notes), new OperandValue(EventGroup), new OperandValue(ActiveYNB));
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredWorkOpList(Session session, string ActiveSetting, string ID, string Descr)
        {
            return session.ExecuteSproc("filter_GetFilteredWorkOpList", new OperandValue(ActiveSetting), new OperandValue(ID), new OperandValue(Descr));
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredWorkOrderCodes(Session session, string IDContains, string DescrContains, string Active)
        {
            return session.ExecuteSproc("filter_GetFilteredWorkOrderCodes", new OperandValue(IDContains), new OperandValue(DescrContains), new OperandValue(Active));
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredWorkRequestsList(Session session, int MatchJobType, int MatchJobAgainst, string JobIDLike, DateTime StartingReqDate, DateTime EndingReqDate, string TitleContains, string RequestedByMatch, string ReasonCodeMatch, string PriorityMatch, string MatchArea, string MatchObjectType, string StateRouteMatch, string MachineIDContains, string ObjectDescr, int UserID, string RouteToID, string Notes, string MiscRef, string ObjLocation, string WorkOpID, string SubAssembly, decimal MilepostStart, decimal MilepostEnd, string MilepostDirection, string ChargeCode, string FundSource, string WorkOrder, string OrgCode, string FundGroup, string ControlSection, string EquipNum, string HasAttachments)
        {
            return session.ExecuteSproc("filter_GetFilteredWorkRequestsList", new OperandValue(MatchJobType), new OperandValue(MatchJobAgainst), new OperandValue(JobIDLike), new OperandValue(StartingReqDate), new OperandValue(EndingReqDate), new OperandValue(TitleContains), new OperandValue(RequestedByMatch), new OperandValue(ReasonCodeMatch), new OperandValue(PriorityMatch), new OperandValue(MatchArea), new OperandValue(MatchObjectType), new OperandValue(StateRouteMatch), new OperandValue(MachineIDContains), new OperandValue(ObjectDescr), new OperandValue(UserID), new OperandValue(RouteToID), new OperandValue(Notes), new OperandValue(MiscRef), new OperandValue(ObjLocation), new OperandValue(WorkOpID), new OperandValue(SubAssembly), new OperandValue(MilepostStart), new OperandValue(MilepostEnd), new OperandValue(MilepostDirection), new OperandValue(ChargeCode), new OperandValue(FundSource), new OperandValue(WorkOrder), new OperandValue(OrgCode), new OperandValue(FundGroup), new OperandValue(ControlSection), new OperandValue(EquipNum), new OperandValue(HasAttachments));
        }
        public static System.Collections.Generic.ICollection<filter_GetFilteredWorkRequestsListResult> Execfilter_GetFilteredWorkRequestsListIntoObjects(Session session, int MatchJobType, int MatchJobAgainst, string JobIDLike, DateTime StartingReqDate, DateTime EndingReqDate, string TitleContains, string RequestedByMatch, string ReasonCodeMatch, string PriorityMatch, string MatchArea, string MatchObjectType, string StateRouteMatch, string MachineIDContains, string ObjectDescr, int UserID, string RouteToID, string Notes, string MiscRef, string ObjLocation, string WorkOpID, string SubAssembly, decimal MilepostStart, decimal MilepostEnd, string MilepostDirection, string ChargeCode, string FundSource, string WorkOrder, string OrgCode, string FundGroup, string ControlSection, string EquipNum, string HasAttachments)
        {
            return session.GetObjectsFromSproc<filter_GetFilteredWorkRequestsListResult>("filter_GetFilteredWorkRequestsList", new OperandValue(MatchJobType), new OperandValue(MatchJobAgainst), new OperandValue(JobIDLike), new OperandValue(StartingReqDate), new OperandValue(EndingReqDate), new OperandValue(TitleContains), new OperandValue(RequestedByMatch), new OperandValue(ReasonCodeMatch), new OperandValue(PriorityMatch), new OperandValue(MatchArea), new OperandValue(MatchObjectType), new OperandValue(StateRouteMatch), new OperandValue(MachineIDContains), new OperandValue(ObjectDescr), new OperandValue(UserID), new OperandValue(RouteToID), new OperandValue(Notes), new OperandValue(MiscRef), new OperandValue(ObjLocation), new OperandValue(WorkOpID), new OperandValue(SubAssembly), new OperandValue(MilepostStart), new OperandValue(MilepostEnd), new OperandValue(MilepostDirection), new OperandValue(ChargeCode), new OperandValue(FundSource), new OperandValue(WorkOrder), new OperandValue(OrgCode), new OperandValue(FundGroup), new OperandValue(ControlSection), new OperandValue(EquipNum), new OperandValue(HasAttachments));
        }
        public static XPDataView Execfilter_GetFilteredWorkRequestsListIntoDataView(Session session, int MatchJobType, int MatchJobAgainst, string JobIDLike, DateTime StartingReqDate, DateTime EndingReqDate, string TitleContains, string RequestedByMatch, string ReasonCodeMatch, string PriorityMatch, string MatchArea, string MatchObjectType, string StateRouteMatch, string MachineIDContains, string ObjectDescr, int UserID, string RouteToID, string Notes, string MiscRef, string ObjLocation, string WorkOpID, string SubAssembly, decimal MilepostStart, decimal MilepostEnd, string MilepostDirection, string ChargeCode, string FundSource, string WorkOrder, string OrgCode, string FundGroup, string ControlSection, string EquipNum, string HasAttachments)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredWorkRequestsList", new OperandValue(MatchJobType), new OperandValue(MatchJobAgainst), new OperandValue(JobIDLike), new OperandValue(StartingReqDate), new OperandValue(EndingReqDate), new OperandValue(TitleContains), new OperandValue(RequestedByMatch), new OperandValue(ReasonCodeMatch), new OperandValue(PriorityMatch), new OperandValue(MatchArea), new OperandValue(MatchObjectType), new OperandValue(StateRouteMatch), new OperandValue(MachineIDContains), new OperandValue(ObjectDescr), new OperandValue(UserID), new OperandValue(RouteToID), new OperandValue(Notes), new OperandValue(MiscRef), new OperandValue(ObjLocation), new OperandValue(WorkOpID), new OperandValue(SubAssembly), new OperandValue(MilepostStart), new OperandValue(MilepostEnd), new OperandValue(MilepostDirection), new OperandValue(ChargeCode), new OperandValue(FundSource), new OperandValue(WorkOrder), new OperandValue(OrgCode), new OperandValue(FundGroup), new OperandValue(ControlSection), new OperandValue(EquipNum), new OperandValue(HasAttachments));
            return new XPDataView(session.Dictionary, session.GetClassInfo(typeof(filter_GetFilteredWorkRequestsListResult)), sprocData);
        }
        public static void Execfilter_GetFilteredWorkRequestsListIntoDataView(XPDataView dataView, Session session, int MatchJobType, int MatchJobAgainst, string JobIDLike, DateTime StartingReqDate, DateTime EndingReqDate, string TitleContains, string RequestedByMatch, string ReasonCodeMatch, string PriorityMatch, string MatchArea, string MatchObjectType, string StateRouteMatch, string MachineIDContains, string ObjectDescr, int UserID, string RouteToID, string Notes, string MiscRef, string ObjLocation, string WorkOpID, string SubAssembly, decimal MilepostStart, decimal MilepostEnd, string MilepostDirection, string ChargeCode, string FundSource, string WorkOrder, string OrgCode, string FundGroup, string ControlSection, string EquipNum, string HasAttachments)
        {
            DevExpress.Xpo.DB.SelectedData sprocData = session.ExecuteSproc("filter_GetFilteredWorkRequestsList", new OperandValue(MatchJobType), new OperandValue(MatchJobAgainst), new OperandValue(JobIDLike), new OperandValue(StartingReqDate), new OperandValue(EndingReqDate), new OperandValue(TitleContains), new OperandValue(RequestedByMatch), new OperandValue(ReasonCodeMatch), new OperandValue(PriorityMatch), new OperandValue(MatchArea), new OperandValue(MatchObjectType), new OperandValue(StateRouteMatch), new OperandValue(MachineIDContains), new OperandValue(ObjectDescr), new OperandValue(UserID), new OperandValue(RouteToID), new OperandValue(Notes), new OperandValue(MiscRef), new OperandValue(ObjLocation), new OperandValue(WorkOpID), new OperandValue(SubAssembly), new OperandValue(MilepostStart), new OperandValue(MilepostEnd), new OperandValue(MilepostDirection), new OperandValue(ChargeCode), new OperandValue(FundSource), new OperandValue(WorkOrder), new OperandValue(OrgCode), new OperandValue(FundGroup), new OperandValue(ControlSection), new OperandValue(EquipNum), new OperandValue(HasAttachments));
            dataView.PopulateProperties(session.GetClassInfo(typeof(filter_GetFilteredWorkRequestsListResult)));
            dataView.LoadData(sprocData);
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredWorkRequestsListOld(Session session, int MatchJobType, int MatchJobAgainst, string JobIDLike, DateTime StartingReqDate, DateTime EndingReqDate, string TitleContains, string RequestedByMatch, string ReasonCodeMatch, string PriorityMatch, string MatchArea, string MatchObjectType, string StateRouteMatch, string MachineIDContains, string ObjectDescr, int UserID, string RouteToID, string Notes, string MiscRef, string ObjLocation, string WorkOpID, string SubAssembly, decimal MilepostStart, decimal MilepostEnd, string MilepostDirection, string ChargeCode, string FundSource, string WorkOrder, string OrgCode, string FundGroup, string ControlSection, string EquipNum, string HasAttachments)
        {
            return session.ExecuteSproc("filter_GetFilteredWorkRequestsListOld", new OperandValue(MatchJobType), new OperandValue(MatchJobAgainst), new OperandValue(JobIDLike), new OperandValue(StartingReqDate), new OperandValue(EndingReqDate), new OperandValue(TitleContains), new OperandValue(RequestedByMatch), new OperandValue(ReasonCodeMatch), new OperandValue(PriorityMatch), new OperandValue(MatchArea), new OperandValue(MatchObjectType), new OperandValue(StateRouteMatch), new OperandValue(MachineIDContains), new OperandValue(ObjectDescr), new OperandValue(UserID), new OperandValue(RouteToID), new OperandValue(Notes), new OperandValue(MiscRef), new OperandValue(ObjLocation), new OperandValue(WorkOpID), new OperandValue(SubAssembly), new OperandValue(MilepostStart), new OperandValue(MilepostEnd), new OperandValue(MilepostDirection), new OperandValue(ChargeCode), new OperandValue(FundSource), new OperandValue(WorkOrder), new OperandValue(OrgCode), new OperandValue(FundGroup), new OperandValue(ControlSection), new OperandValue(EquipNum), new OperandValue(HasAttachments));
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetFilteredWorkShiftList(Session session, string ShiftID, string Descr, string Active)
        {
            return session.ExecuteSproc("filter_GetFilteredWorkShiftList", new OperandValue(ShiftID), new OperandValue(Descr), new OperandValue(Active));
        }
        public static DevExpress.Xpo.DB.SelectedData Execfilter_GetReportsList(Session session, string Imported, string ReportName, string Descr, string ForUserID)
        {
            return session.ExecuteSproc("filter_GetReportsList", new OperandValue(Imported), new OperandValue(ReportName), new OperandValue(Descr), new OperandValue(ForUserID));
        }
    }
}
